// Code generated by capnpc-go. DO NOT EDIT.

package gen

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
)

type Publish capnp.Struct

// Publish_TypeID is the unique identifier for the type Publish.
const Publish_TypeID = 0xdecf58c214d86357

func NewPublish(s *capnp.Segment) (Publish, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Publish(st), err
}

func NewRootPublish(s *capnp.Segment) (Publish, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Publish(st), err
}

func ReadRootPublish(msg *capnp.Message) (Publish, error) {
	root, err := msg.Root()
	return Publish(root.Struct()), err
}

func (s Publish) String() string {
	str, _ := text.Marshal(0xdecf58c214d86357, capnp.Struct(s))
	return str
}

func (s Publish) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Publish) DecodeFromPtr(p capnp.Ptr) Publish {
	return Publish(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Publish) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Publish) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Publish) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Publish) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Publish) RequestID() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Publish) SetRequestID(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Publish) Topic() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Publish) HasTopic() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Publish) TopicBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Publish) SetTopic(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Publish) PayloadSerializerID() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s Publish) SetPayloadSerializerID(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s Publish) ExcludeMe() bool {
	return capnp.Struct(s).Bit(128)
}

func (s Publish) SetExcludeMe(v bool) {
	capnp.Struct(s).SetBit(128, v)
}

func (s Publish) Acknowledge() bool {
	return capnp.Struct(s).Bit(129)
}

func (s Publish) SetAcknowledge(v bool) {
	capnp.Struct(s).SetBit(129, v)
}

// Publish_List is a list of Publish.
type Publish_List = capnp.StructList[Publish]

// NewPublish creates a new list of Publish.
func NewPublish_List(s *capnp.Segment, sz int32) (Publish_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[Publish](l), err
}

// Publish_Future is a wrapper for a Publish promised by a client call.
type Publish_Future struct{ *capnp.Future }

func (f Publish_Future) Struct() (Publish, error) {
	p, err := f.Future.Ptr()
	return Publish(p.Struct()), err
}
