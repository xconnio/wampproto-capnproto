// Code generated by capnpc-go. DO NOT EDIT.

package gen

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
)

type Subscribed capnp.Struct

// Subscribed_TypeID is the unique identifier for the type Subscribed.
const Subscribed_TypeID = 0x80a11030a37e1415

func NewSubscribed(s *capnp.Segment) (Subscribed, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Subscribed(st), err
}

func NewRootSubscribed(s *capnp.Segment) (Subscribed, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Subscribed(st), err
}

func ReadRootSubscribed(msg *capnp.Message) (Subscribed, error) {
	root, err := msg.Root()
	return Subscribed(root.Struct()), err
}

func (s Subscribed) String() string {
	str, _ := text.Marshal(0x80a11030a37e1415, capnp.Struct(s))
	return str
}

func (s Subscribed) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Subscribed) DecodeFromPtr(p capnp.Ptr) Subscribed {
	return Subscribed(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Subscribed) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Subscribed) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Subscribed) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Subscribed) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Subscribed) RequestID() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Subscribed) SetRequestID(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Subscribed) SubscriptionID() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s Subscribed) SetSubscriptionID(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

// Subscribed_List is a list of Subscribed.
type Subscribed_List = capnp.StructList[Subscribed]

// NewSubscribed creates a new list of Subscribed.
func NewSubscribed_List(s *capnp.Segment, sz int32) (Subscribed_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Subscribed](l), err
}

// Subscribed_Future is a wrapper for a Subscribed promised by a client call.
type Subscribed_Future struct{ *capnp.Future }

func (f Subscribed_Future) Struct() (Subscribed, error) {
	p, err := f.Future.Ptr()
	return Subscribed(p.Struct()), err
}
