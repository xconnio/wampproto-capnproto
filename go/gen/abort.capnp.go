// Code generated by capnpc-go. DO NOT EDIT.

package gen

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Abort capnp.Struct

// Abort_TypeID is the unique identifier for the type Abort.
const Abort_TypeID = 0xa7be87e6ef0aa7cc

func NewAbort(s *capnp.Segment) (Abort, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Abort(st), err
}

func NewRootAbort(s *capnp.Segment) (Abort, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Abort(st), err
}

func ReadRootAbort(msg *capnp.Message) (Abort, error) {
	root, err := msg.Root()
	return Abort(root.Struct()), err
}

func (s Abort) String() string {
	str, _ := text.Marshal(0xa7be87e6ef0aa7cc, capnp.Struct(s))
	return str
}

func (s Abort) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Abort) DecodeFromPtr(p capnp.Ptr) Abort {
	return Abort(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Abort) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Abort) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Abort) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Abort) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Abort) Reason() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Abort) HasReason() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Abort) ReasonBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Abort) SetReason(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Abort) PayloadSerializerID() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Abort) SetPayloadSerializerID(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// Abort_List is a list of Abort.
type Abort_List = capnp.StructList[Abort]

// NewAbort creates a new list of Abort.
func NewAbort_List(s *capnp.Segment, sz int32) (Abort_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Abort](l), err
}

// Abort_Future is a wrapper for a Abort promised by a client call.
type Abort_Future struct{ *capnp.Future }

func (f Abort_Future) Struct() (Abort, error) {
	p, err := f.Future.Ptr()
	return Abort(p.Struct()), err
}

const schema_a54fcc87aefc9866 = "x\xda\xecY}t\x14\xd7u\xbfw\xde.\x0b\xfa\xdc" +
	"a\x04H\xb2\xa4\x0dM\x9a:$\xc8 \xa0u\x84a" +
	"\xad\x80\x0c2P\xf3\x04\x04\xa3c7\xcc\xee>\xa4\x81" +
	"\xd1\xce2;\x0b\x88@\x8cS(\xa6\x848\x10\x93\x06" +
	"\xc7P\x10\xa1\x90\x14\x8aQ\xe1\x1c\xea\xc6I\xaccN" +
	"H\xa0'\x81B\x8e\xc9\x01\x1b\x88\xb1Ccl\x8c\xb1" +
	"\xf1\x17\x9d\x9e7\xdf\xfa\x02\xd1\xd6\xfe+\x7fi\xe6\xcd" +
	"\xdd\xfb\xee\xfd\xdd\xdf\xfdxO\xa3\xbe\x98w\x7fht" +
	"\xe1\xdc! \xd0\xf7\xc3\x03\xcc!%\xdf\xd89*\xba" +
	"c\x15P\x11\x05s\xe2oB\x13_\xbc\xd1p\x0dB" +
	"\x11\x00ic\xdeEik\x1e\x7f\xda\x92\xb7\x14\xd0<" +
	"\xb7gV\xdd\xfc\xf4\xb1\xf5@\x0b\x11\xcd\xd7+6O" +
	"\x7fy\xcf\xb6m\xb6\xec\xcd\xbcv)\x9c\xcf\x9f0?" +
	"\x0eh\x1e\xdb\xb6\xf6\x95\xfc\xbdyO\x02\x1d\x8c\x82y" +
	"\xa6V\x9f\xdc\xfc\xfb\x9f\xfc\xd6\x96\xfd\xf3\xfck\xd2h" +
	"Kvd>\xd7{\xa9*]\xf6\xed\x9d\xeb6\x828" +
	"\x14\xcd\xbd\xb9\xe2SK\xbf\xf4\xf2\xbb\x10\x16,\x1b\xf2" +
	"/J[\xf3\xff\x02@:`\xc9\xfe\xee\xfd\x01\xcf&" +
	"&L\xff.\xd0\x02\x14L\xb3l\xd1\x81\xc7\x7f\xf1\xc7" +
	"\x17m\xbd\x85\x05\x9b\xa4!\x05\xfcI,\xe0\xb2;\xcd" +
	"\x9b\xcf\xbd\xf9\xc8\xe6\xef\x01-E\xfc\xe8\xd4=\xfb6" +
	"\x16\x8e\xb9\xc2%\xc7\xb4\x15\x0cFi\x9d%\xba\xa6`" +
	"?\xa0\xb9\xe5gU\xb9X\xe7\xfb?\x00\x1aE\xe1\xbf" +
	"\x95\x91\x9f9\xfe\xc2\xc4\xab\x96\xd2/\x17\x9e\x94\xea\x0b" +
	"\xf9S]!W\xba\xfe\xd1\xb5\x87\xbf\xf67\xe7\xb7[" +
	"\x92\xe6\xd2\xdc{\xb3B\xfa\xe5\xc3\x10F.\xb2\xab\xf0" +
	"\xa4t\xa0p\x18\x80\xf4o\x85\\\xed\x8e\x8e\xf5\xb3\xc7" +
	"\xce\xd8\xb8\x13h\x05\x06\xfc\xb4l\x98ST\x8e\x12+" +
	"\xe2\x8fr\xd1\\\x044\xc7\xdd\xad<\xf0\x9f\xe9\xdd\xbb" +
	"\x81J\x88\xe6\xf2\xc4\xbdS\xf3W_}\xcf\x96>S" +
	",\xa0t\xa9\x98or\xa1\x98\x03||w\xde[\xaf" +
	"\xad\xfd\xe9n\x0e\x04\x9a\x0b\xbe\xff\xf1\xbf\xac=\xfe\xd0" +
	".\xc7\x8ept\x93T\x18\xe5O\x83\xa2\xdc\xe8\x15\x0d" +
	"\xaf\xdd\x83\xf1\x09{\x81\xe6\xa3`n \x7f\xf9\xf9g" +
	"\x9a\x9a/;\xc2\xad\xd1oJ\x8b\xa3\xf6\x137\xfa\x1b" +
	"_\xbfQ\xd8>\xbe\xeag \x96\x0b\xbe\xbb\x80c\x86" +
	"\x88\x02J\xc3E.Y)>\x04h\x1a\x1d\xe3\x1e\xdb" +
	"\xd7\xfe\xcfGm\xf2\x88\xff\xba\xac4\xf3\xb9\xbf\xfb\x91" +
	"\x1d\x8cq\xe2E\xa9\xce\x92\x9d r\x13~\xbdbI" +
	"e\xbe1\xf7W\xbdA\xb1C,G\xe9\x80%\xbcO" +
	"|\x1d\xd0\xfc\xdb\xe4\xfd\x1d\xbfh\xdas\x8c+\x0e\x99" +
	"\x15\xd3\x8fU\x8e\x1f\xf5\xd69\x08\x13.\xf2\xa3\xc1\x17" +
	"\xa5C\x83\xf9\xef\x0e\x0c~\x92\xe3\xd61:\xa2\xdf\xfc" +
	"\xec\xab'9\x14!s\xd0\x1b\xd5\x1b\x9e=\x9d\xf9\xb9" +
	"#=\xa7d\x93\xf4h\x09\x97\x9eWbI\xff\xfdr" +
	"\xe9`\xfd\x1f\xaf\xfc\x96K\x13\xf3\xbb{\xfei\xff\xc5" +
	"\x7f\xff\xc1\xd3\x0e\x168t\x934h\xa8\x05\xe1Pn" +
	"\xc8W\xc5K\xe7\xe7\x0f}\xecw@\x8bQ0\x0f\xde" +
	"=\x9f\x8c]q\xf0\x1f\x1d\xe1\xcbC;\xa5\xb7\x87r" +
	"n\x86\x87q\xe1\xeb\xef\x1e\xc85\xd4L:k\xc3Q" +
	"\xbf\xed\xf1)\x7f\xdd\xf1\xf5\xd36\x1c\x17\x86]\x94\xae" +
	"\x0c\xb3~5\x8c\xc3q`\xeb\xa8\xce/\xff\xf4\xe09" +
	"\x10\x8b\xd0|d\xc1\xe6)S\x964\\s\xf4\xce(" +
	"\xed\x90\xe6\x94\xf2'Z\xcaC=7\xf9RI\xe7\xc3" +
	"\xbf~\x19h\x11\x12\xf3\xaf\xa6M<\xbbn\x8c~\xd5" +
	"\x11^\\\xda!\xb5Y\xc2\xb9Rn\xc4\x96\x95\x91\xeb" +
	"\x9b\x1f\xf8\xf8\x15\xceO4\xeb&\x0fo\xd8\xbb\xf7\xc6" +
	"+\xb6\x11\xf3\xcaNJ\xac\x8c?\xc9e\\\xb1q\xf9" +
	"\xf5i\xcd\xf7\xfe\xd7E\x10\x0b\xd0\xac\xda\xbf\xff\x9e\xa7" +
	"6\x0d\xb8\x06\xe1\xb0\x95\x17e\x9b\xa4\x0de\xc3\x00\xc6" +
	"l.\x8bq\xdc\xf6\xd7\xde8\xb1s\xf5\x89K \x96" +
	"\x0a>.\x80\xd2\xf3\xe5\xd7\xa4_\x96\xf3\xdf\x1c)\xe7" +
	"\xac8;M\xff\xde\xf8_\xae|\xadG\xdaI\xe7\xca" +
	"?\x94.[\x92\x97\xca\xad0W_\xcf\x90\xba\xa7/" +
	"\xf3\x82\"\x98\xbb\x0e\x7f\xf1\xdbGF$\x1c[O\xdc" +
	"\xd5.\x9d\xb9\x8b?\x9d\xbe\x8b\x03v\xb6t\xdeG5" +
	"ONy\xa3\xc7\xf6\x13*>\x94\x1a*\xb8`}\xc5" +
	"c\xe0m(\x0e\x0e\xf8\x17\xb6T\xae\xac\xe8\x94\xd6T" +
	"L\xe1\xd9Y\xc1\xb7\xef\\\xf1\xad\xf6\xf5kk\xde\x04" +
	"QBs\xc6\xbb\xd9\x85\xc5\xcb+\x7fo\xc3:fs" +
	"\xa5\x80\xd2\x8eJ\xfe\xb3\xad\x95\x1c\xab\xf0\xbc\xfdG\xbf" +
	"\xd6\xb6\xfdz\xcfb\xf2Be9J',\xd1\xff\xa8" +
	"\xe4\xa6n{`\xee\xf1\xaf&w^\xb7\xf2\xf8f^" +
	"\xde\x84\xd8\xe9\x13\xfb-\xd1\x09U\x02J\x0dU\x96\xb1" +
	"U\\\xabW\xedh\x11\xa2\xb9\xfb\xa1\x8fH\xe5\x17\xcc" +
	"\xf3N\x08\x94\xaa\x0eiq\x15\x0fA[\x15/\x107" +
	">\x1b\x1a\xbf\xaf\xfe\xbe\x0f\xac\xc8\xbe\xb3}\xd6\xdb\x8d" +
	"M[\x9eph~:vR\xba\x10\xe3{\x9c\x8bY" +
	"\xe1zg\xe1\x91\xb1\x9f\xff\x87\x9a\x9b=\xa3\xf0\xc1g" +
	">\x94\xc2\xc3\xb9(\x0e\x9f\x8b`\xc2\x083\x9bKd" +
	"\x93\xba\x92\x10X\xaa:)g\xd2\x99\xdaY\xf6J$" +
	"\xc1R3\x11\xe9@\x12\x02\x08!\x80\xf8\x85F\x00z" +
	"7A:V@\x11\xb1\x04\xf9\xe2\xe8\xe5\x00t\x14A" +
	"z\x9f\x80\xa6\xce\x16\xe7X\xd6h\x00\x9c\x8c\x83@\xc0" +
	"A\x80\xee\x06\x19\x88\x1b\x8a\x96n\xf0?$\xe5t\x92" +
	"\xa9\xd5I\xb4v\x9d$\xa7#I\xa6\xf2\x1dC\xde\x8e" +
	"\x85|\xc7\x02\x82\xb4\xb4\x0f\xe5\xb9\xb4\xad^P\x12\xcc" +
	"1\x7f\x8e\xb5\x14\xe3>\xb1O\xd4\xfe\xa5LMj\xad" +
	"\xacZ\xb0\xf7\x9d\xeb\xbc6j\x11\x95e\xe9@\x0c\xf4" +
	"\x00qP\xad_\x05\xc5pm|2\x93U\xa6\xc7\xbf" +
	"\xa2k\x8b\x98\x1e4\xb1\x16\x80~\x8e \x1d\x150q" +
	"d\xadow<e\xfd\x12\xa3\xber@\x8c\x02\xc6\x13" +
	"\x96.\x8c\xfa\x1b\xd9\x1f\xcc6\x85\xa9<\xb6\xc8\xad\x9c" +
	"\xa70\x15\xfb\x15\xd7v\x00:\x96 \xbd\xbf\x0f\\2" +
	"r\x9b\xaa\xc9\xa9Y\xc8tEV\x95\xe5,\xa2\x07\xc0" +
	"ia\xaa\xaaU'e\xc27\x9dj\xbd4j*\xcb" +
	"V\xcf\xcc%T%\xdb\xc2P\xe7F\x14xF\xd4w" +
	"\x02\xd0\xa9\x04\xe9\xec\x80\x11\xf4i\x00:\x9b \x9d/" +
	"\xa0(\x08%(\x00\x88\x8f\xfe\x0a\x80\xa6\x08\xd2\x8c\x80" +
	"f\xc6Q'\xe8\x0d)\x966\x94\x05JR\xe6q\x02" +
	"D\x10\x90gC\xc6\xdb\xb0~YR\xcde\x15\xa2\xa5" +
	"\xbd\x8frrQZ[\xaa2!\xd5\xcc\xea\x97\xb0\xb4" +
	"\xd1\xc8\x92LY\xc2R\xd0S\x81\xe0&\x88\xe7B\xbf" +
	"p\xd4o\xc3/K}R6 \xd6\x95^~bv" +
	"\xcd\xcb\x042\x1a\xc2`\xaf\xc6\x9a\xd8\x0c\xd9H\xb6\x04" +
	"\xd1\xe4\xa6L&Hg\x0a\xe8Z2\xa3&\x80\xb0\x10" +
	"\xb2\xc1\xa4|q:A\xfap\xef\xe6\xc5\x0c-\xa3$" +
	"\xb1\x00\x04,\x00\x8c\xb5\xf2}\xb0\xd8\xdf\x1c\x10\x8b\x03" +
	"\xb9@\xba\xe7\x02\x0f9';aV\xbcK=\x0b\xb7" +
	"\xfc\x18\x80>C\x90\xee\x09\x80\xb5+\x01@\x7fH\x90" +
	">\x1b\x88\xf7>\x8e\xe0^\x82\xf4\xb0\x80\"!%H" +
	"\x00\xc4C\xcf\x01\xd0\xc3\x04\xe9\x8b\x02\x8a\xa1P\x09\x86" +
	"\x00\xc4\x1783\x8e\x12\xa4\xa7\x04\x14\xc3\xe1\x12\x0c\x03" +
	"\x88'8\x87N\x11\xa4\xe7\x05^sT\x95\xe9\x0d)" +
	"t\xb9R\xcc\xc9\xe2\x85\x9a\x7f\x9e\xad\xb42\x88h9" +
	"\xa3\xcb\xea$9\x9d\x84\x18S\x95t\xb3O\x0c]k" +
	"\xd6Y6\x8b\xca\x126IV\xd5\xc68\xcb\xe6T#" +
	"\xeb\x0b\xc8\x86\xc1\xf4\xf4W\x049\xcbR\x8d\xacY\xc9" +
	"\x1a\xba\xcdN\x9f]\xd9\x16Y\xe7\x1f\xd1\xfd\x1a\xa4g" +
	".\xad[\xbf\"L\xf7\xca\xf3\x1cg\x8d/\xc1\x1d\x96" +
	"K9\xa1\xe9\x86[\x0a\xea\x12\x9a\x8eF7\x0a\x07\xea" +
	"\x8fW~\xda}\x06\xc7u&g\xb5\xb4\xcb\x87\xdb\x14" +
	"\x01\x0e\x1c\xb7\x1a\xad\xfa\xae\xaa\xd0-\xe5{#i\xa3" +
	"\xcfGQ@\x9b\x01s\xb8\x05\x0f\x13\xa4\xa9\xberH" +
	"\xd7\x92,\x95\xd3\x01Y?Ms\xb3\x8bt\xcf.V" +
	"m\xe5\x92m\xaa\xb5{e\x0d\x0f\x978\xa4\x16\x00\x05" +
	"\xb1\xf0A\x80\x18[&'\x8dxFg\x0b\x94e\xe6" +
	"REM%e=\x05\x00^\xc0\x04\xa6w\x0dW\xc4" +
	"\xb0\x13\xe0\xff\xda\x8dt\x87E}v\xa3^3\x90\xf7" +
	"\x19'\x03\xa3\x9e\x01r\xa7_G=\x03Zy\xb6d" +
	"\x08\xd2\x15\x81\x0cl\xe3y\xb5\x8a \xfdV \x03\xd7" +
	"\xf1\xc5\xef\x10\xa4\xcf|Je8\x98LN\xb42\xdd" +
	"\x92II/\xd1\xf8\xc6\x82\x96v\xe0o\xb0W\"\x8a" +
	"\x96\xe6\xdeWx\xde\x1f\xe2\xf0\x1f$H\x7f\x1e\xf0\xfe" +
	"y\x0e\xffO\x08\xd2\xa3\x01\xef\x8f\xb4\x07\xaa\x8a\xeb\xfd" +
	"\x09\x9e(\xc7\x09\xd2\x97\x04D\xa7\xfc\x9c^\xe8W\x1a" +
	"1\x8cv\xf99\xc7U\x9e%H\xff \xa08@(" +
	"\xc1\x01\x00\xe2%\xbe\xf9\xab\x04\xe9\xd5;\x0d\xf3-Y" +
	"\x1d\xb7\xcb[\x97\xfccz]\x0e\x8a\x8d\x96\x86\xc9^" +
	"fx\xcbq\xa3\x85\xf3\xc3O\x99^\xd2\x88\xf1p\xb8" +
	"%\x83\xc7\xc6.\x19\x01 \x97\xf7\x06\xa4\xdeo 9" +
	"\x14\xbf!H\xcf\xfa@\x9e\xf9&\x00}\x89 }5" +
	"\x00\xe4\x85M>f\x1e\x90Wx\xfb\xfa\x03Az]" +
	"\xb8\xc5\xa4\xd6W\x8b\xbdu\x89p\x19\x0b\xa8\xf7XC" +
	"\xbd.\xc71\x05\x1f\xbb._\x1a5\xd5\xc7\xb0k\x0f" +
	"5\x99\xaek\xba\x87\xa8\xaek\xd8=1y\x17\x9cO" +
	"\x90\xaa\x01D\x15\x8eS\x0bAj\x08\x88\x0e\xa0\x8b\xff" +
	"\x0c\x80\xaa\x04\xe92\x0e\xa8`\x03\x9a\xe3(/#H" +
	"W\x0bh\xb6\xb2lVnf\xb3!\xd2\x96a\x01v" +
	"\xf5`\\$\xa7+\xfd,\x9dn\xfb\x11\x9c\x14kt" +
	"\xde\xc1\x9ay\xfd\xc3\xda\xa0\xda\xc0\xc11\\\x13\xe7\xa9" +
	"\xb8\x889\xa3J\xc0\xdbF\xdf\xdb\xde\x9c\xf5F\x95\xc5" +
	"\xb5Ao\xc3\x8e\xb75~\xbd\xeaok\x88+\x96%" +
	"X\xec\x1bk\x8f1\xdex\xe3\xd9\xed\x8c7\x9e\xcb^" +
	"\x17v\x9c\x8e\xe8\xff?\x87\xa4>\xf3\xbdY\xd3R\x89" +
	"6V\x8d\xf6\xb6S\xb4\x98\xf5\xde\xad\xefsd\x06\x12" +
	"\xa4%\xbdth\x9b\x97\xae\x82\x99\xb9\x98\xf5\xde\x8dq" +
	"\xbd\xc5\xa0&\xd0\x1e\xdcN\xdc\xda\x1eh\x0fd\x95\x1d" +
	"\x83\xb6\x07\x03\x8c\xbb\xed\x0cy\x1bv\xb1ej.\xc5" +
	"f0\xe8R\xd6\x0d\xa6\xeb\xb9\x8c`xU\xdd^\xb0" +
	"k\xd1\x1d\x0c@\xee\xb1\x04\xddc\x09j|\x98\xf6n" +
	"\x0e\xb0&fuLZ\xe2\xe9\\Y\xe3{\xe7\x05\xf4" +
	"q\x8e\xf8\x0a\x82\xf4\x89@}[\xc3\xf3v5A\xba" +
	"=P\xdf\xb6\xf2\x9f\x7f\x9f \xfda`P\xdd\xc1\xed" +
	"\xdcN\x90\xee\x150\xa63Ym\xf5\xb8)\xe7\x8c\x16" +
	"%\xe5\x81\xc5_[\x99\xd1\x02\x11-\x95\xc5\"\xc0\x99" +
	"\x04\xad\x8fE\x801\x9d\x9b\x8aQ\xd7z\xe7\xbcgW" +
	"\xbbi\x0c\xb0\xcdS\xd3W\xceV\xdb\xe9\xf8\xbf\x1bv" +
	"\\0\x85\xeeg\xbc\xf8$\xab\xc3t\xe3\xd8\x8f{\x1b" +
	"7\x12\x81\x9cvq\xcc\xf1\xe6a\x10\xa4\xab\x028\xae" +
	"|\xce\x9fA>\xe51^\xb7\xde\xdd\x8b\x8aF\x96\x8d" +
	"\xe4T\xe3\x93?B\xf7\x193\xa7\x92r\x0bl\xc0\xc6" +
	"\xd5ZA\x1b\xd9d\x05\x8d\xcf\xf0H\xc4\xe1<\x92!" +
	"\xb1l\x04@<\xab\xa4\x9bUf\xeaZ.\x9d\xd2\xb5" +
	"\x04\x10%\x1d\xd7\xe5tJk\x8d-P\xf4\xacQ\xac" +
	"\xcaY\xa3\xcfx\xda\xf7\x89\xde\xdd\x9eXV\xeb_1" +
	"\x89Cj\xfd\xcbvQl\xf4/\xcbD\xb1\xc9\xe1\x81" +
	"\xfd\x87\x993\xfd\x86j\xba\xe36\x10\xa6\x07I\xc2\xf3" +
	"\xea\x11\x82\xb4%\x80#\xab\x0d\xf4C\x97$]Z\x84" +
	"K\x92\xc5M~yr\x87\xa1\xa8o\xb9sSb}" +
	"`\x18\xf5\xbd\x08f\x8e\xd3\xf1\xa3\xbe[\xce\xd7l\xc0" +
	"d\x8c\xfa\x8e:\x9fy\xa6r:\x92\xa4l\xb8\x87\x8a" +
	":g\x8d/\xdd\xea\xac\x96U\x9a\xd3\xb2\xd1u\xf0\xea" +
	"\xf3\x06e\x96wt\xe9~\xa2\xe0\x03\xfd\x97\x08\xd2{" +
	"\x03\xe0\x8d\xe3c\xfa}\x04\xe9\xd4\xfe\x8d\xe9\xfd\x98\xb2" +
	"\xddK7\xa2$\x02\xa7R\x17\x9e;?\x95\xbaG\x17" +
	"t\x8f.1\xeb\xdd\xba\xe5\xf0\xffA\xe4\x95\xe6\xc0\x1d" +
	"B\xa3_[]\x7fw\xd4\x06\xee\x15\xdc\xb6\xb5\xeb\xc1" +
	"\xc0\xbd\x82;(\xedk\x0a\xdc+\x84\x88]\x99\x0f-" +
	"\x0cL\xb3\xe1\x90=z>_\xe3_6\x98Y\x96\xcd" +
	"\xf2\x1e\x1d\xf0\xa0\xb7\xa2\xcdk3\xefa=\x0a9\xd1" +
	"\xba\x0aftm\x09\x14+)\xa6{\xf3\xa2S\xd7}" +
	"\xe7\x1d\x8a%[8s\xd3\xcd\xde\x95\xd0$g\x01\xed" +
	"b\xe0\xf7\xac\xa6@{r\x91Y\xd3\xe8\xb4\xa7\xef\x04" +
	"\xd2h\xc3\x08\x00\xfa\x04A\xfa\x94\x80\xe8d\xd1\xc6&" +
	"\xffd'\x86\x04\x1b\x98-\x1c\xd7\xa7\xec\xe6f\xd9=" +
	"\xa3\xbb3\xaeu\x01\x12\x17ge\xd5\xf0\x04\x14\x83Y" +
	"\xd7\x1f@\xd2Y\x1c\x08\x02\x0e\x04\x8c/bm*K" +
	"c\x04\x04\x8c\x04X\xdfGOa\x7f\xbaD\xba\xd3K" +
	"\xa4\xff\x09\x00\x00\xff\xff\x01\xaa\xa1\xb1"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_a54fcc87aefc9866,
		Nodes: []uint64{
			0x80a11030a37e1415,
			0x8bcb6e604153a8dd,
			0x8f0aac0bdf879ecb,
			0x9189a38e196e1ee5,
			0x934c3d62b006f8da,
			0x96955ceebafdffa3,
			0x9bf8c21f751ebf99,
			0xa0e05e5fb8875d8b,
			0xa3914d34548bb2a1,
			0xa7a76ed346692835,
			0xa7be87e6ef0aa7cc,
			0xac3d3f012fe6497c,
			0xbf1e3ba20df77b7e,
			0xc8aba2ad7f35b274,
			0xca57740b1d767ccf,
			0xcba85ac7b2406383,
			0xd2e423fd720731b2,
			0xd6edeb45b4137a8a,
			0xda7f1660e0e51156,
			0xdc43324975b1f5f4,
			0xddb4be39c2309db1,
			0xdecf58c214d86357,
			0xdffc4695f4077d99,
			0xe2ea38674be7e974,
			0xe5d184a3d1f73aaf,
			0xe67dc93b96724bdc,
			0xe99a410370f42e83,
			0xec478f32fb5918dc,
			0xed330d91ad002fd4,
			0xee32878ba28c7cc2,
			0xf4a0795fc8af5905,
			0xf4a36356cc57469e,
			0xf5de2c77d40f75ac,
			0xf93c45ad003b0423,
			0xfd32972634c56af3,
		},
		Compressed: true,
	})
}
