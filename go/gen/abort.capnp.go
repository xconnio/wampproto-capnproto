// Code generated by capnpc-go. DO NOT EDIT.

package gen

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Abort capnp.Struct

// Abort_TypeID is the unique identifier for the type Abort.
const Abort_TypeID = 0xa7be87e6ef0aa7cc

func NewAbort(s *capnp.Segment) (Abort, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Abort(st), err
}

func NewRootAbort(s *capnp.Segment) (Abort, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Abort(st), err
}

func ReadRootAbort(msg *capnp.Message) (Abort, error) {
	root, err := msg.Root()
	return Abort(root.Struct()), err
}

func (s Abort) String() string {
	str, _ := text.Marshal(0xa7be87e6ef0aa7cc, capnp.Struct(s))
	return str
}

func (s Abort) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Abort) DecodeFromPtr(p capnp.Ptr) Abort {
	return Abort(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Abort) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Abort) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Abort) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Abort) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Abort) Reason() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Abort) HasReason() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Abort) ReasonBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Abort) SetReason(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Abort) PayloadSerializerID() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Abort) SetPayloadSerializerID(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// Abort_List is a list of Abort.
type Abort_List = capnp.StructList[Abort]

// NewAbort creates a new list of Abort.
func NewAbort_List(s *capnp.Segment, sz int32) (Abort_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Abort](l), err
}

// Abort_Future is a wrapper for a Abort promised by a client call.
type Abort_Future struct{ *capnp.Future }

func (f Abort_Future) Struct() (Abort, error) {
	p, err := f.Future.Ptr()
	return Abort(p.Struct()), err
}

const schema_a54fcc87aefc9866 = "x\xda\xecY{\x94\x14\xe5\x95\xbf\xb7\xben\x1a\xe6\xc1" +
	"tQ3a\x06g\xa6\xc1hV]\x19a\xd0]\xd3" +
	"\x8a\x1d\x02#\x8e\xca\xca\xd7\x83A\xe6\xe8\x86~|\xcc" +
	"\x94\xd4t5\xd5\xd5\xc0\x10\x8c\xe0\xea\xa2\xab\xc4@$" +
	"+*,\x0caa\xb3\xb0\x08\x8b\xe7\xa0\x9b\x97s\xe4" +
	"\xc4\xa8\xe7$\xb0\x9a\x13s\xf0ED\xd7\x8d&\x86@" +
	"0\x9a\xd9\xdas\xeb=/\x81}\xe4\xec\x1f\xfb\xd7t" +
	"}u\xeb\xfb\xee\xfd\xdd\xdf}}3\xed\xf1\x8a/D" +
	"\xa6W/\xac\x03\x89\x7f\x14\x1dc\xd5\xd5~u\xc7\xb4" +
	"\xf8\xf65\xc0e\x94\xac\xeb~\x12\xb9\xee\xb93\xed'" +
	"!\x12\x03P6T\x1cW\xb6T\xd0\xaf\xcd\x15+\x00" +
	"\xad\xd7vw\xccZ\\x\xf1A\xe0\xd5\x88\xd6\xbb\x8d" +
	"\x9bn~}\xf7\xd6\xad\x8e\xec@E\x9f\x12\xad\xa4_" +
	"X\x99\x02\xb4^\xdc\xba\xee\x8d\xca=\x15\x0f\x03\x9f\x80" +
	"\x92\xf5j\xd2\x98\xd3\xf5\x8b\xef\xfc\xd4\x91\xbd\xb8\xf2\xa4" +
	"2\xdd\x96\x9dZI\xfb\x9eh.4|m\xc7\x03\x1b" +
	"@\xfe\x0cZ{\xca5/\xaf\xb8\xfc\xf5\xd3\x10\x95l" +
	"\x1d*\x8f+[*\xff\x04@\xd9o\xcb\xfe\xfc\xa31" +
	"Ofg\xde\xfc\x0d\xe0U\xc8,\xaba\xe9\xfe\xb5?" +
	"\xfc\xe5s\xce\xbe\xd5U\x1b\x95\xba*\xfa%W\xed\x03" +
	"\xb4vX\x03\xcf\xfc\xea\xf6M\xdf\x04^\x8f\xf8\xc9\xcb" +
	"W\xec\xddP=\xe3\x03\x92\x9c\xf1t\xd5\x04T~d" +
	"\x8b\x1e\xb6E7\x7f\xbf\xb9\x9c\xe8\xff\xe8q\xe0q\x94" +
	"\xfeC\x9d:\xf9\xa5g\xaf\xfb\xd0\xde\xb4\xb7\xfa\xa8r" +
	"_5\xfdZ[M\x0a<x\xc7\xbaC_\xfe\xcb7" +
	"\xb7\xd9\x92\xd6\x8a\xf2\xef:\"\xc6{\x87 \x8a$r" +
	"\xa2\xfa\xa8\xf2\x9b\xea\x89\x00\xca\xef\xabi\xdb\xed\x07\x1e" +
	"\\p\xe5\xbc\x0d;\x807b\xc8N[\x87M\xe3'" +
	"\xa1\xb2s<\xfd\xdc>~!\x02ZW]\xa2^\xff" +
	"\xaf\x85]\xbb\x80+\x88\xd6\xaa\xec\xd57T\xde\xfb\xe1" +
	"\xef\x1c\xe9\x86\xb8\x84\xca\xc5q:dJ\x9c\x00~i" +
	"W\xc5\xaf\xdfY\xf7\xbd]\x04\x04ZK\x1e\xfd\xc3?" +
	"\xad{\xe9\x96\x9d\xae\x1em\xf1\x8d\xca<[\xb8=N" +
	"J\xafn\x7f\xe7\x0aL\xcd\xdc\x03\xbc\x12\x99\xb5\x9e\xfd" +
	"\xd9\xe7\x9e\xe8\xecz\xcf\x15\xde\x1b\xbfG\xd9O\xc23" +
	"\xf6\xc6\x13\xa4\xc7W\xbfr\xa6\xba\xef\x9a\xe6\xef\x83<" +
	"I\x0a\xec\x05\x9c\xf1\x8a,\xa1\xf2\x96L\x1f\xbd&\xdf" +
	"\x02h\x99\x07\xae\xba{o\xdf?>\xef\xb0G\xfe\xe7" +
	"\x95\xf5\xc5\x8b\xfe\xfa\x1f\x1co\x9c\x96\x8f+8\xc1\xe6" +
	"\x86L:\xfcx\xf5\xf2\xa6Js\xe1\x0b#a\x91\x99" +
	"0\x09\x95e\xb6p\xcf\x84w\x01\xad\xbf\xca}\xe1\xc0" +
	"\x0f;w\xbfH\x1bG\xad\xc6\x9b_l\xbaf\xda\xaf" +
	"_\x83(#\x11U9\xae\x94\x15\xfan\x99b\x91\xc2" +
	"\x07\xa6\xc7\x8c\x81\xcf\xbe}\x94\xb0\x88X\xe3\xdeoY" +
	"\xff\xe4+\xc5\x1f\xb8\xd2\x9b\xea6*[\xeaHzs" +
	"\xdd\xc3$\xfd7\xab\x94\x83m\xbf\xfc\xe0\xa7\x0e\x85\xbe" +
	"\xb1\xfb\xef\xf7\x1d\xff\x97\xc7\x1fs\xc1\x985q\xa3\xd2" +
	">\xd1\xc6p\")\xf2%\xf9\xc4\x9b\x8b?s\xf7\xcf" +
	"\x81\xd7\xa0d\x1d\xbcd1\xbbr\xf5\xc1\xbfs\x85/" +
	"\xad\xefW\xa6\xd7\x139\xdb\xeaI\xf8\xd4\xe9\xfd\xe5\xf6" +
	"\xd6\xd9\xc7\x1c8\xda\xb6\xae\x9d\xfb\x17\x07\xbe\xf2\x8a\x03" +
	"\xc7\x94\x86\xe3\xca\xd4\x06\xfb\xab\x06\x82c\xff\x96i\xfd" +
	"\x9f\xff\xde\xc1\xd7@\x1e\x8f\xd6\xedK6\xcd\x9d\xbb\xbc" +
	"\xfd\xa4\xbb\xef\xfa\x86\x03\xca&[vC\x03\xf9za" +
	"\xeeg\xb5\xfd\xb7\xfd\xf8u\xe0\xe3\x91Y\x7f~\xd3u" +
	"\xc7\x1e\x98a|\xe8\x0a\xefo8\xa0<M\xc23\x9e" +
	"j\xb0\xdd\xb7\xf9\xae\xd8\xa9M\xd7\xff\xe1\x0db(Z" +
	"\xb3\xe6Li\xdf\xb3\xe7\xcc\x1b\x8e\x16\xafN:\xaa\x9c" +
	"\x98D\xbf\xde\x9aD;\x9b\xef\xbd{S\xd7\xd5\xff~" +
	"\x1c\xe4*\xb4\x9a\xf7\xed\xbb\xe2\x91\x8dcNB4J" +
	"\x12\xd1\x0b6*\xd5\x17L\x04\x98Qw\x81\xbd\xf1\xbe" +
	"\xe4\x99#;\xee=r\x02\xe4z)\x00\x06P\x99\xd9" +
	"xRio\xb4Ak$Z\x1c\xbb\xc9\xf8\xe65?" +
	"\xba\xeb\x9da\x81\xa7\xdc\xd1\xf8\xb1\xa2\xda\x92\xa2\xd1\xf6" +
	"s\xcb\xa9\"\x9b\xf5\xd8{\x94R\x98\xb5\xf3\xd0\x9f~" +
	"\xed\xf0eYWW\xde\xd4\xa7,j\xa2_\xb76Q" +
	"0\x1d\xab_\xf4I\xeb\xc3s\xdf\x1fv\xfc@\xd3\xc7" +
	"\xca\xb8f[\xe5\xe6\xbb\xc1?P\x9e\x10\xb2/jo" +
	"9\xb3\xb9_ik\x9eKa\xddL\xc7\xf7\xaf~\xa8" +
	"\xef\xc1u\xad\xbf\x02YAk\xde\xe9\xd2\x9d5\xab\x9a" +
	"~\xe1\xe0:\xe3\xd6\x84\x84J&ak\x9d \xac\xa2" +
	"\x8b\xf6=\xff\xe5\xdem\xa7\x86\xa7\x93\xb5\x89I\xa8l" +
	"\xb0E\xd7'\xc8\xb9[\xaf_\xf8\xd2\x97r;N\xd9" +
	"\x91<PQ13\xf1\xca\x91}\xb6\xe8\x00\xed:n" +
	"\xb2\xad\xecd\xda\xd5\xcfw|<\xa2\xb5\xeb\x96OX" +
	"\xd3\xa5\xd6\x9b\xae\x0b.\x9d|@\x99>\x99\\\xf0\xf9" +
	"\xc9\x94\"\xce|6r\xcd\xde\xb6k\x7fo{\xf6\xb7" +
	"\xdb:~\x93\xee\xdc|\xbf\xc7\xf3)G\x95\xedS\xe8" +
	"\x8c-Slw\xfd\xf6\xce\xc3W~\xeeo[\x07\x86" +
	"{\xe1\xe9\x0b?V\x0e_H\xa2\xcf^\xb8\x10\xc1\x82" +
	"\xcb\xacR9[\xca\x19jV\x12\xf9\x96\\\xa6X(" +
	"&;\x9c\x95XV\xe4\xe7#\xf2\xb1,\x02\x10A\x00" +
	"\xf9\xd24\x00\xbf\x84!\xbfRB\x19\xb1\x16iq\xfa" +
	"*\x00>\x8d!\xbfVB\xcb\x10\xcb\xca\xa2d\xb6\x03" +
	"\xce\xc1q \xe18@\xef\x80\"\xa4LU/\xb4\x07" +
	"/r\x99BNh-9\xb4O\x9d\x9d)\xc4rB" +
	"\xa3\x13#\xfe\x89\xd5tb\x15C^?\xca\xe6\xe5\x82" +
	"\xb3\xbd\xa4f\x85\xab\xfe\xad\xf6R\x82l\x12\xff\xab\xfa" +
	"\xaf\x10ZN\xef\x11-\x92s\xeeB\xf71\xad\xc74" +
	"Q\xe2c1T\x05\xe4q\xc9 \x0d\xca\xd1dj\x8e" +
	"\xc8h\xc2H}\xd1\xd0\x97\x0a#\xacb\x12\x80_\xc4" +
	"\x90O\x0b\xa985\x19\xe8\x9d\xca\xdb_b<\xd8\x1c" +
	"\x10\xe3\x80\xa9\xac\xbd\x17\xc6\x83\x83\x9c\x17V\xaf*4" +
	"\xf2-\x92\x96\x8bT\xa1\xa1\xed\xd7*\xff\xd06\xc2e" +
	"\x0eC>?t\xe8\xbc>\x00>\x9f!\xbf]BY" +
	"ZS\x8b\x12\x80\xbc\xe8F\x00~\x1bC\x9e\x1f\x05\xac" +
	"b\xa6W\xd33\xf9\x0e\x14\x86\x9a\xd1\xd4U\"f\x84" +
	"\x10+\x1az\x97!J% \xd5@B\"k\xb7\xd0" +
	"4\xbd%\x97a\xa4\xdd\x0d\xf6CZ\xd7D\xa9e~" +
	"9\xab\xa9\xa5n\x81\xc6\x10m\xfb\x01\xf8\x0d\x0c\xf9\x82" +
	"\x90\xb6\xfc1\x00\xbe\x80!_L\xdaJ\x8e\xb6w\xbc" +
	"\x00\xc0\xf3\x0cyQB\xab\xe8n'\x19\xedyQ0" +
	"\xd5%j.C\x0e\x0d4)\xfa\x07\xb6\xad\xcci\xe5" +
	"\x92\xca\xf4\x82\xff2\x93[Z\xd0WhB\xcaw\x89" +
	"\xb6\xe5\xa2`\xa6EN\xa8\xcbE\x1e\x86o y\x91" +
	"\xe4\x9bpN\x81d\x9c\x85\x88\xf6\xf6\xb9\x8c\x09\x89\xc1" +
	"<\x0c\"xp\x00gQ\xf0\x08\x86\xab:\xb6&\xe6" +
	"e\xcc\\\xf7(\xbe\xf7]\xdf\x1aBX\x8a8`r" +
	"Z\xbc\x99!\xbfmd\xf5\x12\xa6^TsX\x05\x12" +
	"V\x01&z\xe8\x1c\xac\x09\x0e\x07\xc4\x9aP\xd0\xb0\xa1" +
	"AC.\xa7\xa8`\xc2\xf6w\xbd\xaf\xe1\xe6o\x03\xf0" +
	"'\x18\xf2\xdd!\xb0vf\x01\xf8\xb7\x18\xf2'C\xfe" +
	"\xdeK\x08\xeea\xc8\x0fI(3V\x8b\x0c@~\xea" +
	"\x19\x00~\x88!\x7fNB9\x12\xa9\xc5\x08\x80\xfc," +
	"1\xe3y\x86\xfce\x09\xe5h\xb4\x16\xa3\x00\xf2\x11\xe2" +
	"\xd0\xcb\x0c\xf9\x9b\x12%'M\x13F{\x1e=\xae\xd4" +
	"\x10Y|W\xd3\xeb\x05j\x8f\x80\x98^6\x07\xad\xce" +
	"\xce\x14r\x90\x10\x9aZ\xe8\x0a\x88\xe1\xf2\x1e\xd5\xe5b" +
	"vF\xd3\xd2)Q*kf)\x10\xc8\x98\xa60\x0a" +
	"_\x942%\x91O\x8b.\xb5d\x1a\x0e;\x03v\x95" +
	"\xba3\x06\xbdD\xefm\x98\x9e\xe5\x82a\x7f\xc5\x84\xe1" +
	"\xe7\xf1[\xdd5Z\x82\xf3\xcc\xab\x99\xacn\x98^\xce" +
	"\x98\x95\xd5\x0d4\x87P8\x94\xa8\xfc<\xd5\x1708" +
	"e\x88LI/x|8Kb \xe0Hk\xb4\x0b" +
	"\x81\xa6\xd9\xea\xd6\xfa\x87\xddE\xea\xaef\xc8\xef\x0f\x0e" +
	"\xbb\x8f\xd6\xeee\xc8\xbfN\x0c@\x87\x01\xebI\x83\xaf" +
	"3\xe4O\x10\x03\xd68\x0c\xd8|\x0f\x00\x7f\x94!\xff" +
	"\x161`\xad\xc3\x80\xed\x94\xc9\xb61\xe4{F\x8b6" +
	"C\xcf\x89|\xd9\x00\x14\xe7h\x84\xe1d\x84\xf9\xe8e" +
	"\xb9a\xfe\x0f\xe7=/j\xd9\xd0\xa8\x15-v\x8c\xda" +
	"\x10T\xd9V5\xb5\xd2wr]\x12\x00%\xb9\xfaF" +
	"\x80\x84X\x99\xc9\x99\xa9\xa2!\x96\xa8+\xad\x15\xaa\x96" +
	"\xcfe\x8c<\x00\xf8D\x90\x841\x98\x061\xd3\x09\xac" +
	"\xffn94\\v\x8eZ\x0eG\x8cl*tnd" +
	"\xc7}\x052\xfdA~\xf6\x15\xe8\xa1(,2\xe4\xab" +
	"C\x91\xddK\xf1\xba\x86!\x7f(\x14\xd9\x0f\xbc\x108" +
	"\xfb\x8f\x92\xde\xc3A\xeaz\xab8$H\xd5\xc2r\x9d" +
	"\x0e\x96\xf4\x82\x0b\x7f\xbb\xb3\x12S\xf5\x02Y\x7f\x91o" +
	"\xfd\x07\x04\xff\xfb\x0c\xf9G!\xebO\x13\xfc\xa7\x18\xa6" +
	"1d\xfd@\x1f@\x1a\x19vTa`\xbe2\x0e\x93" +
	"\x00\x1d\x11Z\x8f\xa3\x84\xe8\xa46\xa5\x1a\xef\x04\xe8\xa8" +
	"\xa2\xe5z\x12\x8f\xa2\x9d\xdd\x94:\\\x05\xd0QK\xeb" +
	"\x93i}\x8cT\x8bc\x00\x94&L\x03t4\xd2\xfa" +
	"%(\xe1\x94\x18\xd6\xda\xd3\xc5\xc5x\x0f@\xc7E\xb4" +
	">\x0d%\x9c>\x96T\x1cK\xa3;\xde\x08\xd0q9" +
	"\xbd\xb8\x1a\xcf\x97$\x9f\x1aA)'\xe9\x0e\xca\x0a\xc2" +
	"\x98U\x86\x1a\xb3\xbb}\x8e\x1f\x85\xfer\xca\xec&v" +
	"\x05\xe19B\xc8\x9e_P\x0ar\xbd\x97\xf6\x88\x07N" +
	"\xdak\xf4\x9d\xf6\x14\xf9\xe7 C\xfe\x83\x90\xd3\xbeK" +
	"u\xe7;\x0c\xf9\xf3!\xa7\x1d\xee\x0b\x95\x18\x8f\xb2G" +
	"\xc8\xe7?a\xc8\x8f\xf9\x0e\x93_\xa5\xf4\xf43\x86\xfc" +
	"\xed\xc0[\xf2[\x1b\x01\xf8\xdb\x0c\xf9\x87\x81\xab\xe4\x0f" +
	"\xa8\x04\xff\x1bC~J\xfa\x94\xb6t\xb46\xe1,\xad" +
	"\x99\x1b\x1d\x80\xc6\xb054f\x95\xc9\x03\x10 =\xe8" +
	"MZ\xd7\x02\xc4\x07\xf7\x01\x960\x0c\xdd\xf0\x115\x0c" +
	"\x1d\x87&\x01\xaa\xe4\x8b\x19r-\x84\xa8J8u3" +
	"\xe4\xa6\x84\xe8\x02\xba\xecB\x00\xae1\xe4+\x09P\xc9" +
	"\x01\xb4L(\xafd\xc8\xef\x95\xd0\xea\x11\xa5R\xa6K" +
	",\x80XoQ\x84\xb88\x8c\x9f\xb1\xb2\xa1\x9esR" +
	"wJ\xa8\xe4\x86s\xda}\x06\xbb\xc1\x0f&\xd3q\xc9" +
	"\xd0\x94\x1cmMQ\xd8/\x15n\xbb\x15\xb26\x1dX" +
	";\x92\xb1~\xbb\xb5,\x19\xb66\xeaZ\xdb\x1a\xe4\xc6" +
	"s-Z)\xd5\xd6\x04k\x02e\x9dV\xcco\xd1|" +
	"\xbd\xdd\x16\xcd7\xd9\xef$\\\xa3c\xc6\xff\xccD8" +
	"jv\xe8\xd2\xf5|\xb6W\xb4\xa0s\xec\\=a?" +
	"\x0f\xe9]\x08\x99\xb1\x0cy\xed\x08]\x86\xc3Ko\x83" +
	"\xf9\xe5\x84\xfd|\x0e\xddDk\xa8\xc0x\xdd\xc4\x03D" +
	"\xae\x87\x18\xf2GC\xdd\xc4&\xfa\xfa\x11\x86|[\xa8" +
	"\x9b\xd8\x92\x0dz\xd4\xb37\xc7g\xa1\x9c\xa0\xf2\x94\x17" +
	"\xf3\xc8\x89C\xeb\x13\xc4\xf2]\"TmLa\x18\xe5" +
	"\xa2d\xfa\xc5\xc6Yp\xd2\xd6y\xf4{\xde\x14\x86\xde" +
	"\x14\x86:\xcd\x0e\xfe\x8d\x0a\xb6&\xecB\x1e\x86\xb15" +
	"\x08=\xdf\xf7k\x93\x01\xb6~*\xbc/\xeb\xb6j\xdb" +
	"B\xa9pKk\xb8+ss\xe1\xf6t\xd0\x95%\x0c" +
	"\x91\xd1z|\x1ag\xcaf\xb7\x9a\xf7!\xa4\xc7\x1ea" +
	"vCL\xcf\x97p<\xe0|\x86\xf6\xcb\xf1\x80\x09\x83" +
	"T\xc5\xb8\xa7\xbd;\x07;\x89\xf1&\x01\xd8\x1b*\x0f" +
	"#\x87w\x8b\x13\xb9\xff\xb5\x1e\xcc\x03S\x1a:\xd2\xa6" +
	"f\xdb\xa5kH\x02\xfc\xf6H]P6\x14\xfe\x1e\x8e" +
	"e\xaa3&C\xbe&\x84\xe3]\xcf\x04\xcc\xfd#O" +
	"-\x86\xfd\xec]\xe0\xa4E)V\xd6\xcc\xffCW\x0b" +
	"\xa3:\xd7\xcd\xcevZ\xb0\x0f\xbf*i{wj\xa7" +
	"\xed]\x9am\x90\xc9S\xc8\xe5\x11\xb9\xe12\x80TI" +
	"-ti\xc22\xf4r!o\xe8Y`j!ed" +
	"\x0ay\xbd'\xb1D5Jf\x8d\x96)\x99\xa3:\xde" +
	"\xb9\x90\xf5/G\xe5\x86dpG'\xd7%\x83\xffW" +
	"\xc8r:\xb8m\x94\xe5N\x970\xce\x1fa\xcd\x0f\x8a" +
	"\xb4\xe5\x8d\x0b\xc0\x84\x11f\x13\x05\xe0\xed\x0cyw\x08" +
	"p\x91\x0c\xd5X\x8fM\x83\xca\x8e\xc7\xa6e\x9dA\x85" +
	"\xf1\xda\xb1x\xa0\xb9{\xd5d\xbf\x10\x18\x0f\xac\x08\x87" +
	"\x98\xdbE\xc4\x03\xb3\xdc\xb7\xa5\x90\xca\x18\x0f\x0cu_" +
	"SH\x13oY.czC\xd1,w\x8d\x96>m" +
	"\x86-\xa9]\x85\x8c9\xb8\xf5\x1b\xf5f\xa9\xc3\x1f\xbd" +
	"\x86ND4\x90\\\xce\x90_\x1d\x02\xef*\x1a3\xae" +
	"e\xc8o8\xb71\xe3\x1c\xa6\x04\xef\xd6\x92\xa9\xd9\xd0" +
	"\xb4\xee\xc1s\xfe\xd3\xba7z\xa17z%\xecg\xfb" +
	"\xf6'\xf8\x1f\x9b\x9f\xc3Cw+\xe9 \x09{\xf6n" +
	"O\x86\xee[\xbcR\xb8\xf3\xc6\xd0}\x8b\xd7|\xed\xed" +
	"\x0c\xdd\xb7D\x98\x93\xc2\x9f\xba3\xd4!G#N;" +
	"\xfb\xdd\xd6\xe0\x12\xc6*\x89R\x89\xea~\xc8\x82\x91\xb2" +
	";%q\x8a\xe6a\x19\x9f\xe9\x83\x05\x8b\x86\xbe\x1cj" +
	"\xd4\xbc0\xfc\x1e\xd4-\x00\x81\xf1.\xc5r\xdd\xc4\xdc" +
	"B\x97\x7fU6\xdb]@1\xa4G\xe8\x0c\xd5\xb1\x91" +
	"\xaf\x1c\xdc0Z\x7f\x19\x00\xbf\x9f!\x7fDBt\xa3" +
	"hCg\xe8\x1a\"\"9\xc0lN\x06\x8d\x83\xad\xf7" +
	"\xbc\xa1\xc6x\xda\x85H\\S\xcah\xa6/\xa0\x9a\xc2" +
	"\xbe\x16\x02V(\xe1X\x90p,`j\xa9\xe8\xd5D" +
	"\x01c a,\xc4\xfaQ\x8a\x8f\xf8\xff\xcb\xb5\xf3\xbd" +
	"\\\xfb\xcf\x00\x00\x00\xff\xff{\xe7\xd4\xfd"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_a54fcc87aefc9866,
		Nodes: []uint64{
			0x80a11030a37e1415,
			0x8bcb6e604153a8dd,
			0x8f0aac0bdf879ecb,
			0x9189a38e196e1ee5,
			0x934c3d62b006f8da,
			0x96955ceebafdffa3,
			0x9bf8c21f751ebf99,
			0xa0e05e5fb8875d8b,
			0xa3914d34548bb2a1,
			0xa7a76ed346692835,
			0xa7be87e6ef0aa7cc,
			0xac3d3f012fe6497c,
			0xbf1e3ba20df77b7e,
			0xc8aba2ad7f35b274,
			0xca57740b1d767ccf,
			0xcba85ac7b2406383,
			0xd2e423fd720731b2,
			0xd6edeb45b4137a8a,
			0xda7f1660e0e51156,
			0xdc43324975b1f5f4,
			0xddb4be39c2309db1,
			0xdecf58c214d86357,
			0xdffc4695f4077d99,
			0xe2ea38674be7e974,
			0xe5d184a3d1f73aaf,
			0xe67dc93b96724bdc,
			0xe99a410370f42e83,
			0xec478f32fb5918dc,
			0xed330d91ad002fd4,
			0xee32878ba28c7cc2,
			0xf4a0795fc8af5905,
			0xf4a36356cc57469e,
			0xf5de2c77d40f75ac,
			0xf93c45ad003b0423,
			0xfd32972634c56af3,
		},
		Compressed: true,
	})
}
