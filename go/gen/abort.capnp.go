// Code generated by capnpc-go. DO NOT EDIT.

package gen

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Abort capnp.Struct

// Abort_TypeID is the unique identifier for the type Abort.
const Abort_TypeID = 0xa7be87e6ef0aa7cc

func NewAbort(s *capnp.Segment) (Abort, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Abort(st), err
}

func NewRootAbort(s *capnp.Segment) (Abort, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Abort(st), err
}

func ReadRootAbort(msg *capnp.Message) (Abort, error) {
	root, err := msg.Root()
	return Abort(root.Struct()), err
}

func (s Abort) String() string {
	str, _ := text.Marshal(0xa7be87e6ef0aa7cc, capnp.Struct(s))
	return str
}

func (s Abort) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Abort) DecodeFromPtr(p capnp.Ptr) Abort {
	return Abort(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Abort) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Abort) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Abort) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Abort) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Abort) Reason() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Abort) HasReason() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Abort) ReasonBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Abort) SetReason(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Abort) PayloadSerializerID() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Abort) SetPayloadSerializerID(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// Abort_List is a list of Abort.
type Abort_List = capnp.StructList[Abort]

// NewAbort creates a new list of Abort.
func NewAbort_List(s *capnp.Segment, sz int32) (Abort_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Abort](l), err
}

// Abort_Future is a wrapper for a Abort promised by a client call.
type Abort_Future struct{ *capnp.Future }

func (f Abort_Future) Struct() (Abort, error) {
	p, err := f.Future.Ptr()
	return Abort(p.Struct()), err
}

const schema_a54fcc87aefc9866 = "x\xda\xecY}t\x14\xd7u\xbfw\xde.\x8b\xbew" +
	"\x18\x09$\x90\xb4\xd0|\xd4\xa6A\x06\x01\xad\xbd\x18\xd6" +
	"\x0a\xc8 \x035O@0:v\xc3~<\xa4\x81\xd1" +
	"\xce2;\x0b\x88@\x0c)\x14S\xec8\x10\x93\x1a\xc7" +
	"P\x10\xa1\xe0\x14\x8a\xa5\xc29\xc4\x8d\xf3\xa1cNh" +
	"\xa0'\x81B\x8e\x9d\x036\x10c\x87&$\x84\xe0\xe0" +
	"\xd8\xa6\xd3\xf3\xe6[_ \xda\xda\x7f\xe5/\xcd\xbc\xb9" +
	"{\xdf\xbd\xbf{\x7f\xf7\xde\xf74vR\xfeC\x81q" +
	"E\x0b\xca@\xa0\xef\x07\x07\x19e\xa5_\xde36\xbc" +
	"{-P\x11\x05c\xcaO\x03S^\xbb\xd9p\x1d\x02" +
	"!\x00iK\xfe%iG>\x7f\xda\x9e\xbf\x02\xd08" +
	"\xbf\x7fn\xdd\xa2\xf4\x89\xcd@\x8b\x10\x8dw+\xb7\xcd" +
	"zs\xff\xce\x9d\x96\xec\xad\xfcv)X\xc0\x9f\xb0 " +
	"\x06h\x9c\xd8\xb9\xf1\xad\x82\x03\xf9\xcf\x02\x1d\x82\x82\xf1" +
	"FT\x9b\xd6\xfc\x8b\xef\xfe\xcc\x92\xfdL\xc1ui\x9c" +
	");\xa6\x80\xeb\xbd\\\x9d\xae\xf8\xea\x9eM[@\x1c" +
	"\x8a\xc6\x81\\\xc9\x99\x15\x9f{\xf3=\x08\x0a\xa6\x0d\x05" +
	"\x97\xa4\x1d\x05\x7f\x0e u\x98\xb2?\x7f\x7f\xd0\xcb\x89" +
	"\xc9\xb3\xbe\x0e\xb4\x10\x05\xc3\xa8X\xda\xb1\xeeG\xbfz" +
	"\xcd\xd2[T\xb8U*+\xe4Ob!\x97\xddc\xdc" +
	"z\xe57\x8fo\xfb\x06\xd0r\xc4\x0f\xcf\xdcwpK" +
	"\xd1\xf8\xab\\r|[\xe1\x10\x946\x99\xa2\x1b\x0a\x0f" +
	"\x01\x1a\xdb\xbf_\x9d\x8bt\xbd\xffM\xa0a\x14\xfe[" +
	"\x1e3\xf2\xe4\x0f\xa7\\3\x95>PtZ\xaa/\xe2" +
	"OuE\\\xe9\xe6'6\x1e\xfd\xe2\xdf\\\xd8eJ" +
	"\x1a+r\x7f\x98\x1b\xd0\xae\x1c\x85 r\x91\xbdE\xa7" +
	"\xa5\x8e\xa2a\x00\xd2w\x8a\xb8\xda\xdd\x9d\x9b\xe7M\x98" +
	"\xbde\x0f\xd0J\xf4\xf9i\xda0\xbfx8J\xac\x98" +
	"?\xc6\x8b\x17 \xa01\xf1\x1e\xf9\xe1\xffL\xef\xdb\x07" +
	"TB4V%\xee\x9fQ\xb0\xfe\xda\x1f,\xe97J" +
	"\x04\x94.\x97\xf0M.\x96p\x80O\xee\xcb\xff\xed;" +
	"\x1b\xbf\xb7\x8f\x03\x81\xc6\xe2\xe7?\xfa\x97\x8d'\x1f\xdd" +
	"k\xdb\x11\x0co\x95\x8a\xc2\xfc)/\xcc\x8d^\xdd\xf0" +
	"\xce}\x18\x9b|\x00h\x01\x0a\xc63\xe4/?\xfbb" +
	"S\xf3\x15[\xb85\xfc\x15iY\xd8z\xe2F\x7f\xf9" +
	"K7\x8b\xda'U\x7f\x1f\xc4\xe1\x82\xe7.\xe0\xf82" +
	"Q@i\x94\xc8%\xab\xc4G\x01\x0d\xbds\xe2\x93\x07" +
	"\xdb\xff\xf9\xb8\x95<\xe2\xbf\xae,\xcf|\xfa\xef^\xb2" +
	"\x821Q\xbc$\xd5\x99\xb2\x93En\xc2OV/\xaf" +
	"*\xd0\x17\xfc\xb8/(v\x8b\xc3Q\xea0\x85\x0f\x8a" +
	"\xef\x02\x1a\x7f\x9b|\xa8\xf3GM\xfbOp\xc5\x01\xa3" +
	"r\xd6\x89\xaaIc\x7f{\x1e\x82\x84\x8b\xbc4\xe4\x92" +
	"td\x08\xff]\xc7\x90g9n\x9d\xe3B\xda\xadO" +
	"\xbd}\x9aC\x110\xf2~]\xf3\xcc\xcbg3?\xb0" +
	"\xa5\xe7\x97n\x95\x9e(\xe5\xd2\x0bKM\xe9\xbf_%" +
	"\x1d\xae\xff\xd5\xd5\x9fqib|}\xff?\x1d\xba\xf4" +
	"o\xdf|\xc1\xc6\x02\x87n\x95\xf2\x86\x9a\x10\x0e\xe5\x86" +
	"|A\xbc|a\xd1\xd0'\x7f\x0e\xb4\x04\x05\xe3\xf0=" +
	"\x8b\xc8\x84\xd5\x87\xff\xd1\x16\xbe2\xb4K\xfa\xddP\x9e" +
	"\x9b\xc1a\\\xf8\xc6{\x1d\xb9\x86\xda\xa9\xe7,8\xea" +
	"w\xae\x9b\xfe\xd7\x9d_:k\xc1qq\xd8%\xe9\xea" +
	"0\xf3W\xc38\x1c\x1d;\xc6v=\xf0\xbd\xc3\xe7A" +
	",F\xe3\xf1\xc5\xdb\xa6O_\xdep\xdd\xd6;\xbb\xbc" +
	"S\x9a_\xce\x9fh9\x0f\xf5\x82\xe4\xeb\xa5]\x8f\xfd" +
	"\xe4M\xa0\xc5H\x8c\xbf\x9a9\xe5\xdc\xa6\xf1\xda5[" +
	"xYy\xa7\xd4\xc6\x85\xc7\xe7\xca#\xdc\xbf\xedkB" +
	"7\xb6=\xfc\xd1[<A\xd1\xa8\x9b6\xaa\xe1\xc0\x81" +
	"\x9boYVl\xaf8-\xed\xad\xe0O\xbb+\xb8f" +
	"\xfd\xca\xbb3\x9b\xef\xff\xafK \x16\xa2Q}\xe8\xd0" +
	"}\xcfm\x1dt\x1d\x82A.q\xacb\xab\xf4\x1f\x15" +
	"\xc3\x00\xc6\x9f\xad0\x15\x1f\x8a\xde<\xb5g\xfd\xa9\xcb" +
	" \x96\x0b\x1e0\x80\xd2\xad\xe1\xd7\xa5\xbc\x11&h#" +
	"xZ\x9c\x9b\xa9}c\xd2\xbf\xafy\xa7\x17\xef\xa4\xaa" +
	"\x11\x1fH\xf7\x9a\x92\x9f\x19a\xc6\xb9\xe6F\x86\xd4\xbd" +
	"p\x85W\x14\xc1\xd8{\xf4/\xbezlt\xc2\xb6U" +
	"\xacl\x97**\xf9SY%G\xec\\\xf9\xc2\x0fk" +
	"\x9f\x9d\xfe\xeb^\xdb\xaf\xa9\xfc@\xdad\x0an\xa8|" +
	"\x12\xdc\x0d\xc5!>\xff\x82\xa6\xcaW+\xbb\xa4c\x95" +
	"\xd3\x01\xa4?V\xf2\xed\xbbV?\xdd\xbeyc\xedo" +
	"@\x94\xd0\x98\xfd^vI\xc9\xaa\xaa_X\xb8\x8e?" +
	"[%\xa0t\xb1\x8a\xff\xec|\x15\xc7*\xb8\xf0\xd0\xf1" +
	"/\xb6\xed\xba\xd1\xbb\x9a`\xf5p\x94\xc4j\xb3\x04U" +
	"sSw>\xbc\xe0\xe4\x17\x92{n\x98D\xbe\x95\x9f" +
	"?9r\xf6\xd4!StM\xb5\x80\xd2&StC" +
	"5\xd7\xea\x96;Z\x8ch\xec{\xf4CRu\xafq" +
	"\xc1\x0e\xc1K\xd5\x9dRG5\x0f\xc1w\xaay\x85\xb8" +
	"\xf9\xa9\xc0\xa4\x83\xf5\x0f\xfe\xd1\x8c\xec\xefw\xcd\xfd]" +
	"c\xd3\xf6\xa7\xec</\x1byZ\x1a5\x92\xefQ5" +
	"\xd2\x0c\xd7\xef\x97\x1c\x9b\xf0\xd9\x7f\xa8\xbd\xd5;\x0a\x0f" +
	"\x8c\xfa@\xaa\x1f\xc5E\xebF-@0`\xb4\x91\xcd" +
	"%\xb2IMN\x08,U\x93\x8cg\xd2\x99\xe8\\k" +
	"%\x94`\xa99\x88t0\x09\x00\x04\x10@\xbc\xb7\x11" +
	"\x80\xdeC\x90N\x10PD,E\xbe8n\x15\x00\x1d" +
	"K\x90>(\xa0\xa1\xb1e9\x96\xd5\x1b\x00\xa7a\x1e" +
	"\x08\x98\x07\xe8l\x90\x81\x98.\xab\xe9\x06\xefC2\x9e" +
	"N2\xa5&\x89\xe6\xaeS\xe3\xe9P\x92)|\xc7\x80" +
	"\xbbc\x11\xdf\xb1\x90 -\xefGy.m\xa9\x17\xe4" +
	"\x04\xb3\xcd\x9fo.E\xb8O\xecc\xb5\x7f\x05S\x92" +
	"j+\xab\x11\xac}\x17\xd8\xaf\x8djHaY:\x18" +
	"}M@\xcc\x8bzeP\x0cFc\xd3X\\aZ" +
	"\xec\xf3\x9a\xba\x94i~\x13\xa3\x00\xf4\xd3\x04\xe9X\x9f" +
	"\x89c\xa2\x9e\xdd\xb1\x94\xf9K\x0c{\xca\x011\x0c\x18" +
	"K\x98\xba0\xecmd}0\xdad\xa6\xf0\xd8\"\xb7" +
	"r\xa1\xcc\x14\x1cP\\\xdb\x01\xe8\x04\x82\xf4\xa1~p" +
	"\xc9\xc4\xdb\x145\x9e\x9a\x8bL\x93\xe3\x8a\xbc\x8a\x854" +
	"\x1f8-LQ\xd4\x9ad\x9c\xf0Mg\x98/\x8d\xaa" +
	"\xc2\xb25sr\x09E\xce\xb60\xd4\xb8\x11\x85\xae\x11" +
	"\xf5]\x00t\x06A:\xcfg\x04}\x01\x80\xce#H" +
	"\x17\x09(\x0aB)\x0a\x00\xe2\x13?\x06\xa0)\x824" +
	"#\xa0\x91\xb1\xd5\x09ZC\x8a\xa5uy\xb1\x9c\x8c\xf3" +
	"8\x01\"\x08\xc8\xd9\x90q7\xac_\x99TrY\x99" +
	"\xa8i\xf7c<\xb94\xad\xaeP\x98\x90jf\xf5\xcb" +
	"YZodI&/g)\xe8\xad@p\x08\xe2\xba" +
	"0 \x1c\xb5;\xe4\x97\xa9>\x19\xd7!\xd2=\xbd<" +
	"bv\xe7e\x02\x19\x0d\xa0\xbfYcmdv\\O" +
	"\xb6\xf8\xd1\xe4\xa6L#H\xe7\x08\xe8X2\xbb\xd6\x87" +
	"\xb0\x10\xb0\xc0\xa4|q\x16A\xfaX\xdf\xe6Et5" +
	"#'\xb1\x10\x04,\x04\x8c\xb4\xf2}\xb0\xc4\xdb\x1c\x10" +
	"K|\\ =\xb9\xc0C\xce\x93\x9d03\xde\xe5\xae" +
	"\x85\xdb\xbf\x0d@_$H\xf7\xfb\xc0\xda\x9b\x00\xa0\xdf" +
	"\"H_\xf6\xc5\xfb G\xf0\x00AzT@\x91\x90" +
	"R$\x00\xe2\x91W\x00\xe8Q\x82\xf45\x01\xc5@\xa0" +
	"\x14\x03\x00\xe2\x0fyf\x1c'H\xcf\x08(\x06\x83\xa5" +
	"\x18\x04\x10O\xf1\x1c:C\x90^\x10x\xcdQ\x14\xa6" +
	"5\xa4\xd0\xc9\x95\x12\x9e,n\xa8\xf9\xe7yr+\x83" +
	"\x90\x9a\xd3\xbb\xadN\x8d\xa7\x93\x10a\x8a\x9cn\xf6\x12" +
	"CS\x9b5\x96\xcd\xa2\xbc\x9cM\x8d+Jc\x8ce" +
	"s\x8a\x9e\xf5\x04\xe2\xba\xce\xb4\xf4\xe7\x85x\x96\xa5\x1a" +
	"Y\xb3\x9c\xd55+;\xbd\xec\xca\xb6\xc45\xfe\x11\x9d" +
	"\xaf\xfe\xf4\xcc\xa55\xf3W\x84iny\x9eo\xaf\xf1" +
	"%\xb8\xcbr\x19O\xa8\x9a\xee\x94\x82\xba\x84\xaa\xa1\xde" +
	"#\x85}\xf5\xc7-?\xed^\x06\xc74\x16\xcf\xaai" +
	"'\x1f\xeeP\x048p\xdcj4\xeb\xbb\xa2@\x0f\xca" +
	"\xf7\x95\xa4\x8d^>\x8a\x02Z\x190\x9f[\xf0\x18A" +
	"\x9a\xea\x8fC\x9a\x9ad\xa9\x9c\x06\xc8\x06h\x9a\xc3." +
	"\xd2\x93]\xac\xc6\xe4\x92e\xaa\xb9{U-\x0f\x97X" +
	"\x16\x05@A,z\x04 \xc2V\xc6\x93z,\xa3\xb1" +
	"\xc5\xf2Jc\x85\xac\xa4\x92q-\x05\x00n\xc0\x04\xa6" +
	"u\x0fWH\xb7\x08\xf0\x7f\xedF\x9a\x9dE\xfdv\xa3" +
	">\x19\xc8\xfb\x8c\xcd\xc0\xb0k@\xbc\xcb\xab\xa3\xae\x01" +
	"\xad\x9c-\x19\x82t\xb5\x8f\x81m\x9cWk\x09\xd2\xa7" +
	"}\x0c\xdc\xc4\x17\xbfF\x90\xbe\xf8\x09\x95a?\x99\xec" +
	"hez\x90IN/W\xf9\xc6\x82\x9a\xb6\xe1o\xb0" +
	"VB\xb2\x9a\xe6\xdeW\xba\xde\x1f\xe1\xf0\x1f&H\x7f" +
	"\xe0\xf3\xfeU\x0e\xffw\x09\xd2\xe3>\xef\x8f\xb5\xfb\xaa" +
	"\x8a\xe3\xfd)N\x94\x93\x04\xe9\xeb\x02\xa2]~\xce." +
	"\xf1*\x8d\x18D\xab\xfc\x9c\xe7*\xcf\x11\xa4\xbf\x14P" +
	"\x1c$\x94\xe2 \x00\xf12\xdf\xfcm\x82\xf4\xda\xdd\x86" +
	"\xf9\xb6Y\x1d\xb3\xca[7\xfe1\xad.\x07%zK" +
	"\xc34\x97\x19\xeerLo\xe1\xf9\xe1Q\xa6\x0f\x1a1" +
	"\x1e\x0e\xa7d\xf0\xd8X%\xc3\x07\xe4\xaa\xbe\x80\xd4\x06" +
	"\x0c$\x87\xe2\xa7\x04\xe99\x0f\xc87\xbe\x02@_'" +
	"H\xdf\xf6\x01yq\xab\x87\x99\x0b\xe4U\xde\xbe~I" +
	"\x90\xde\x10n3\xa9\xf5\xd7bo_\"\x9c\x8c\x05\xd4" +
	"z\xad\xa1V\x97\xe3\x98\x82\x87]\xb7/\x8d\xaa\xe2a" +
	"\xd8\xbd\x87\x1aL\xd3T\xcdET\xd3T\xecIL\xde" +
	"\x05\x17\x11\xa4\x8a\x0fQ\x99\xe3\xd4B\x90\xea\x02\xa2\x0d" +
	"\xe8\xb2?\x03\xa0\x0aA\xba\x92\x03*X\x80\xe68\xca" +
	"+\x09\xd2\xf5\x02\x1a\xad,\x9b\x8d7\xb3y\x10j\xcb" +
	"0_v\xf5\xca\xb8PN\x93\x07X:\x9d\xf6#\xd8" +
	"\x14k\xb4\xdf\xc1\x9cy\xbd\xc3Z^\xd4wp\x0c\xd6" +
	"\xc68\x15\x972{T\xf1y\xdb\xe8y\xdb\x97\xb3\xee" +
	"\xa8\xb2,\xea\xf76h{[\xeb\xd5\xab\x81\xb6\x86\x98" +
	"lZ\x82%\x9e\xb1\xd6\x18\xe3\x8e7\xae\xdd\xf6x\xe3" +
	"\xba\xecva\xdb\xe9\x90\xf6\xffsH\xea\x97\xef\xcd\xaa" +
	"\x9aJ\xb4\xb1\x1a\xb4\xb6\x9d\xaeF\xcc\xf7\x1e}\x9f#" +
	"3\x98 -\xed\xa3C[y\xe9(\x98\x93\x8b\x98\xef" +
	"\\A\xa9\xab`\x0d7z5A\xfa\x94\x17\x83\x0d\xb5" +
	"\xbe\xa2\xeft\xe2M<\xb9\x9e&H\x9f\xe71Xk" +
	"\xc5`\xdb#\x00\xf49\x82t\x17\x9f\xc5\xd6Y\x1c\xde" +
	"\x91\xf0\xe6\xbb;\x0f\x96wH9\xb6R\xc9\xa5\xd8l" +
	"\x06\xbeZ\xef\xf4\x0c\x08\xa5\x9a\x99\xaf\x03\xe8L\xd3r" +
	"\x19Aw\x1b\x80\xb5`\x95\xad\xbb\x98\x95\x9c\x13\x0c:" +
	"'\x18T\xf9\xdc\xed^2`m\xc4l\xae~\x18k" +
	"=\xea\xb9\xb1_\x17\xf5\xb0uK\xe1\x06\x8e\xcez\x1b" +
	"2\xa7\x14\xee\xe0?\x7f\x9e \xfd\x96o\xa6\xdd\xcd\xed" +
	"\xdcE\x90\x1e\x100\xa2\xb1\xb8\xd2\xea\xa6q<\xa7\xb7" +
	"\xc8)\x17B\xfe\xda\xca\xf4\x16\x08\xa9\xa9,\x16\x03\xce" +
	"!h~,\x06\x8ch\xdcT\x0c;\xd6\xdbGC\xab" +
	"0\xced\x80m\xae\x9a\xfe\xe8]c1\xf7\x7f7\x17" +
	"9`\x0a=\x8f\x83\xb1\xa9f3\xeaQ\x00\xbf\xdd\xd7" +
	"d\x92\xf0\xd1\xdf\xc11\xc7\xfb\x8cN\x90\xae\xf5\xe1\xb8" +
	"\xe6\x15/s?\xe1\x89_3\xdf\x9d;\x8dF\x96\x0d" +
	"\xe5\x14\xfd\xe3?m\xf7\x1b3\xbb\xe8\x9al7\x01\x9b" +
	"\x185\x836\xa6\xc9\x0c\x1a\x1f\xf7\x91\x88\xa3x$\x03" +
	"b\xc5h\x80XVN7+\xcc\xd0\xd4\\:\xa5\xa9" +
	"\x09 r:\xa6\xc5\xd3)\xb55\xb2X\xd6\xb2z\x89" +
	"\x12\xcf\xea\xfd\xc6\xd3\xbazt\xaf\x01\xc5\x8a\xa8w\x1b" +
	"%\x96E\xbd\x8byQl\xf4\xee\xd5D\xb1\xc9\xce\x03" +
	"\xeb\x0f3\xe6x\xbd\xd7p&s L\xf3'\x09\xe7" +
	"\xd5\xe3\x04i\x8b\x0fG\x16\xf5\xb5N'I\xbau\x13" +
	"'I\x965y\x8d\xc3\x99\x9b\xc2\x9e\xe5\xf6\xa5\x8a\xf9" +
	"\x81a\xd8\xf3\xc2\xcf\x1c{8\x08{n\xd9_\xb3>" +
	"\x931\xec9j\x7f\xe6L\xe5\xe9H\x92q\xdd9\x7f" +
	"\xd4\xd9k|\xe9v\xc7\xba\xac\xdc\x9c\x8e\xeb\xddg\xb4" +
	"~/[\xe6\xba\xa7\x9c\x9e\x87\x0f>\xfb\x7f\x8e \xbd" +
	"\xdf\x07\xdeD>\xd1?H\x90\xce\x18\xd8D?\x80\x81" +
	"\xdc\xb9\x9f#r\xc2w\x80u\xe0\xb9\xfb\x03\xacs\xca" +
	"A\xe7\x94\x131\xdf\xcd\x0b\x11\xef\x9fIni\xf6]" +
	"74z\xb5\xd5\xf1ww\xd4w\x05\xe1t\xb8\xbd\x8f" +
	"\xf8\xae \x9c\x99\xea`\x93\xef\x0a\"@\xac\xca|d" +
	"\x89o\xf0\x0d\x06\xac)\xf5\xd5Z\xef^\xc2\xc8\xb2l" +
	"\x96\xb7s\x9f\x07}\x15m^\x9byg\xebU\xc8\x89" +
	"\xda]0\xa3\xa9\xcb\xa1DN1\xcd\x1d-\xed\xba\xee" +
	"9o\xa7X\xb2\x85gn\xba\xd9\xbd=\x9aj/ " +
	"\xeb\xd1\xfa\x9b|\xed\xc9\xed\xfd\x8dv{\xfa\x9a\x8fF" +
	"\xcf\x8c\x06\xa0O\x11\xa4\xcf\x09\x886\x8b\xb64y\x87" +
	"@1 X\xc0l\x8fz\xf3\x80i\xf7\xec\x9e\xce8" +
	"\xd6\xf9\x92\xb8$\x1bWtW@\xd6\x99yS\x02$" +
	"\x9d\xc5\xc1 \xe0`\xc0\xd8R\xd6\xa6\xb04\x86@\xc0" +
	"\x90/\xeb\xfb\xe9)\xecO\xf7Mw{\xdf\xf4?\x01" +
	"\x00\x00\xff\xff\x1d\x06\xa6z"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_a54fcc87aefc9866,
		Nodes: []uint64{
			0x80a11030a37e1415,
			0x8bcb6e604153a8dd,
			0x8f0aac0bdf879ecb,
			0x9189a38e196e1ee5,
			0x934c3d62b006f8da,
			0x96955ceebafdffa3,
			0x9bf8c21f751ebf99,
			0xa0e05e5fb8875d8b,
			0xa3914d34548bb2a1,
			0xa7a76ed346692835,
			0xa7be87e6ef0aa7cc,
			0xac3d3f012fe6497c,
			0xbf1e3ba20df77b7e,
			0xc8aba2ad7f35b274,
			0xca57740b1d767ccf,
			0xcba85ac7b2406383,
			0xd2e423fd720731b2,
			0xd6edeb45b4137a8a,
			0xda7f1660e0e51156,
			0xdc43324975b1f5f4,
			0xddb4be39c2309db1,
			0xdecf58c214d86357,
			0xdffc4695f4077d99,
			0xe2ea38674be7e974,
			0xe5d184a3d1f73aaf,
			0xe67dc93b96724bdc,
			0xe99a410370f42e83,
			0xec478f32fb5918dc,
			0xed330d91ad002fd4,
			0xee32878ba28c7cc2,
			0xf4a0795fc8af5905,
			0xf4a36356cc57469e,
			0xf5de2c77d40f75ac,
			0xf93c45ad003b0423,
			0xfd32972634c56af3,
		},
		Compressed: true,
	})
}
