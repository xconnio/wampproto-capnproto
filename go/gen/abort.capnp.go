// Code generated by capnpc-go. DO NOT EDIT.

package gen

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Abort capnp.Struct

// Abort_TypeID is the unique identifier for the type Abort.
const Abort_TypeID = 0xa7be87e6ef0aa7cc

func NewAbort(s *capnp.Segment) (Abort, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Abort(st), err
}

func NewRootAbort(s *capnp.Segment) (Abort, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Abort(st), err
}

func ReadRootAbort(msg *capnp.Message) (Abort, error) {
	root, err := msg.Root()
	return Abort(root.Struct()), err
}

func (s Abort) String() string {
	str, _ := text.Marshal(0xa7be87e6ef0aa7cc, capnp.Struct(s))
	return str
}

func (s Abort) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Abort) DecodeFromPtr(p capnp.Ptr) Abort {
	return Abort(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Abort) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Abort) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Abort) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Abort) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Abort) Reason() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Abort) HasReason() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Abort) ReasonBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Abort) SetReason(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Abort) PayloadSerializerID() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Abort) SetPayloadSerializerID(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// Abort_List is a list of Abort.
type Abort_List = capnp.StructList[Abort]

// NewAbort creates a new list of Abort.
func NewAbort_List(s *capnp.Segment, sz int32) (Abort_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Abort](l), err
}

// Abort_Future is a wrapper for a Abort promised by a client call.
type Abort_Future struct{ *capnp.Future }

func (f Abort_Future) Struct() (Abort, error) {
	p, err := f.Future.Ptr()
	return Abort(p.Struct()), err
}

const schema_a54fcc87aefc9866 = "x\xda\xecY}t\x14\xd7u\xbfw\xde.\x8b\xbew" +
	"\x18\x09$\x90\xb4\xd0|\xd4\xa6A\x06\x01\xad\xbd\x18\xd6" +
	"\x0a\xc8\xa0\x005O@0:v\xc3~<\xa4\x81\xd1" +
	"\xce2;\x0b\x88@\x0c)\x14S\xec8\x10\x93\x1a\xc7" +
	"P\x10\xa1\xe0\x14\x8a\xa5\xc29\xc4\x8d\xf3\xa1cNh" +
	"\xa0'\x81B\x8e\x9d\x036\x10c\x87&$\x84\xe0\xe0" +
	"/:=o\xbe\xf5\x05\xa2\xad\xfdW\xfe\xd2\xcc\x9b\xbb" +
	"\xf7\xdd\xfb\xbb\xf7w\xef}Oc'\xe5?\x14\x18W" +
	"\xb4\xa0\x0c\x04\xfa^p\x90QV\xfa\x95=c\xc3\xbb" +
	"\xd7\x02\x15Q0\xa6\xfc,0\xe5\xd5\x9b\x0d\xd7!\x10" +
	"\x02\x90\xb6\xe4_\x92v\xe4\xf3\xa7\xed\xf9+\x00\x8d\xf3" +
	"\xfb\xe7\xd6-J\x9f\xd8\x0c\xb4\x08\xd1x\xa7r\xdb\xac" +
	"7\xf6\xef\xdci\xc9\xde\xcao\x97\x82\x05\xfc\x09\x0bb" +
	"\x80\xc6\x89\x9d\x1b\xdf,8\x90\xff\x0c\xd0!(\x18\xaf" +
	"G\xb5i\xcd\xbf\xfc\xde\xcf-\xd9\xcf\x14\\\x97\xc6\x99" +
	"\xb2c\x0a\xb8\xde\xcb\xd5\xe9\x8a\xaf\xed\xd9\xb4\x05\xc4\xa1" +
	"h\x1c\xc8\x95\x9cY\xf1\xb97\xde\x85\xa0`\xdaPp" +
	"I\xdaQ\xf0\xe7\x00R\x87)\xfb\x8b\xf7\x06\xbd\x94\x98" +
	"<\xeb\x1b@\x0bQ0\x8c\x8a\xa5\x1d\xeb~\xfc\xebW" +
	"-\xbdE\x85[\xa5\xb2B\xfe$\x16r\xd9=\xc6\xad" +
	"\x97\x7f\xfb\xd8\xb6o\x02-G\xfc\xf0\xcc}\x07\xb7\x14" +
	"\x8d\xbf\xca%\xc7\xb7\x15\x0eAi\x93)\xba\xa1\xf0\x10" +
	"\xa0\xb1\xfd\x07\xd5\xb9H\xd7{\xdf\x02\x1aF\xe1\xbf\xe5" +
	"1#O\xfeh\xca5S\xe9\x03E\xa7\xa5\xfa\"\xfe" +
	"TW\xc4\x95n~|\xe3\xd1/\xfd\xcd\x85]\xa6\xa4" +
	"\xb1\"\xf7\xc7\xb9\x01\xed\xcaQ\x08\"\x17\xd9[tZ" +
	"\xea(\x1a\x06 }\xb7\x88\xab\xdd\xdd\xb9y\xde\x84\xd9" +
	"[\xf6\x00\xadD\x9f\x9f\xa6\x0d\xf3\x8b\x87\xa3\xc4\x8a\xf9" +
	"c\xbcx\x01\x02\x1a\x13\xef\x91\x1f\xfe\xcf\xf4\xbe}@" +
	"%DcU\xe2\xfe\x19\x05\xeb\xaf\xfd\xd1\x92~\xbdD" +
	"@\xe9r\x09\xdf\xe4b\x09\x07\xf8\xe4\xbe\xfc\xdf\xbd\xbd" +
	"\xf1\xfb\xfb8\x10h,~\xee\xa3\x7f\xd9x\xf2\x91\xbd" +
	"\xb6\x1d\xc1\xf0V\xa9(\xcc\x9f\xf2\xc2\xdc\xe8\xd5\x0do" +
	"\xdf\x87\xb1\xc9\x07\x80\x16\xa0`<M\xfe\xf2\xb3/4" +
	"5_\xb1\x85[\xc3_\x95\x96\x85\xad'n\xf4W\xbe" +
	"|\xb3\xa8}R\xf5\x0f@\x1c.x\xee\x02\x8e/\x13" +
	"\x05\x94F\x89\\\xb2J|\x04\xd0\xd0;'>q\xb0" +
	"\xfd\x9f\x8f[\xc9#\xfe\xeb\xca\xf2\xcc\xa7\xff\xeeE+" +
	"\x18\x13\xc5KR\x9d);Y\xe4&\xfct\xf5\xf2\xaa" +
	"\x02}\xc1O\xfa\x82b\xb78\x1c\xa5\x0eS\xf8\xa0\xf8" +
	"\x0e\xa0\xf1\xb7\xc9\x87:\x7f\xdc\xb4\xff\x04W\x1c0*" +
	"g\x9d\xa8\x9a4\xf6w\xe7!H\xb8\xc8\x8bC.I" +
	"G\x86\xf0\xdfu\x0cy\x86\xe3\xd69.\xa4\xdd\xfa\xd4" +
	"[\xa79\x14\x01#\xef75O\xbft6\xf3C[" +
	"z~\xe9V\xe9\xf1R.\xbd\xb0\xd4\x94\xfe\xfbU\xd2" +
	"\xe1\xfa__\xfd9\x97&\xc67\xf6\xff\xd3\xa1K\xff" +
	"\xf6\xad\xe7m,p\xe8V)o\xa8\x09\xe1Pn\xc8" +
	"\x17\xc5\xcb\x17\x16\x0d}\xe2\x17@KP0\x0e\xdf\xb3" +
	"\x88LX}\xf8\x1fm\xe1+C\xbb\xa4\xdf\x0f\xe5\xb9" +
	"\x19\x1c\xc6\x85o\xbc\xdb\x91k\xa8\x9dz\xce\x82\xa3~" +
	"\xe7\xba\xe9\x7f\xdd\xf9\xe5\xb3\x16\x1c\x17\x87]\x92\xae\x0e" +
	"3\x7f5\x8c\xc3\xd1\xb1cl\xd7\x03\xdf?|\x1e\xc4" +
	"b4\x1e[\xbcm\xfa\xf4\xe5\x0d\xd7m\xbd\xb3\xcb;" +
	"\xa5\xf9\xe5\xfc\x89\x96\xf3P/H\xbeV\xda\xf5\xe8O" +
	"\xdf\x00Z\x8c\xc4\xf8\xab\x99S\xcem\x1a\xaf]\xb3\x85" +
	"\x97\x95wJm\\x|\xae<\xc2\xfd\xdb\xbe&t" +
	"c\xdb\xc3\x1f\xbd\xc9\x13\x14\x8d\xbai\xa3\x1a\x0e\x1c\xb8" +
	"\xf9\xa6e\xc5\xf6\x8a\xd3\xd2\xde\x0a\xfe\xb4\xbb\x82k\xd6" +
	"\xaf\xbc3\xb3\xf9\xfe\xff\xba\x04b!\x1a\xd5\x87\x0e\xdd" +
	"\xf7\xec\xd6A\xd7!\x18\xe4\x12\xc7*\xb6J\xffQ1" +
	"\x0c`\xfc\xd9\x0aS\xf1\xa1\xe8\xcdS{\xd6\x9f\xba\x0c" +
	"b\xb9\xe0\x01\x03(\xdd\x1a~]\xca\x1ba\x826\x82" +
	"\xa7\xc5\xb9\x99\xda7'\xfd\xfb\x9a\xb7{\xf1N\xaa\x1a" +
	"\xf1\x81t\xaf)\xf9\x99\x11f\x9ckndH\xdd\xf3" +
	"WxE\x11\x8c\xbdG\xff\xe2k\xc7F'l[\xc5" +
	"\xcav\xa9\xa2\x92?\x95Ur\xc4\xce\x95/\xfc\xb0\xf6" +
	"\x99\xe9\xbf\xe9\xb5\xfd\x9a\xca\x0f\xa4M\xa6\xe0\x86\xca'" +
	"\xc0\xddP\x1c\xe2\xf3/h\xaa|\xa5\xb2K:V9" +
	"\x1d@z\xbf\x92o\xdf\xb5\xfa\xa9\xf6\xcd\x1bk\x7f\x0b" +
	"\xa2\x84\xc6\xecw\xb3KJVU\xfd\xd2\xc2u\xfc\xd9" +
	"*\x01\xa5\x8bU\xfcg\xe7\xab8V\xc1\x85\x87\x8e\x7f" +
	"\xa9m\xd7\x8d\xde\xd5\x04\xab\x87\xa3$V\x9b%\xa8\x9a" +
	"\x9b\xba\xf3\xe1\x05'\xbf\x98\xdcs\xc3$\xf2\xad\xfc\xfc" +
	"\xc9\x91\xb3\xa7\x0e\x99\xa2k\xaa\x05\x946\x99\xa2\x1b\xaa" +
	"\xb9V\xb7\xdc\xd1bDc\xdf#\x1f\x92\xaa{\x8d\x0b" +
	"v\x08^\xac\xee\x94:\xaay\x08\xbe[\xcd+\xc4\xcd" +
	"O\x05&\x1d\xac\x7f\xf0}3\xb2\x7f\xd85\xf7\xf7\x8d" +
	"M\xdb\x9f\xb4\xf3\xbcl\xe4ii\xd4H\xbeG\xd5H" +
	"3\\\x7fXrl\xc2g\xff\xa1\xf6V\xef(<0" +
	"\xea\x03\xa9~\x14\x17\xad\x1b\xb5\x00\xc1\x80\xd1F6\x97" +
	"\xc8&59!\xb0TM2\x9eIg\xa2s\xad\x95" +
	"P\x82\xa5\xe6 \xd2\xc1$\x00\x10@\x00\xf1\xdeF\x00" +
	"z\x0fA:A@\x11\xb1\x14\xf9\xe2\xb8U\x00t," +
	"A\xfa\xa0\x80\x86\xc6\x96\xe5XVo\x00\x9c\x86y " +
	"`\x1e\xa0\xb3A\x06b\xba\xac\xa6\x1b\xbc\x0f\xc9x:" +
	"\xc9\x94\x9a$\x9a\xbbN\x8d\xa7CI\xa6\xf0\x1d\x03\xee" +
	"\x8eE|\xc7B\x82\xb4\xbc\x1f\xe5\xb9\xb4\xa5^\x90\x13" +
	"\xcc6\x7f\xbe\xb9\x14\xe1>\xb1\x8f\xd5\xfe\x15LI\xaa" +
	"\xad\xacF\xb0\xf6]`\xbf6\xaa!\x85e\xe9`\xf4" +
	"5\x011/\xea\x95A1\x18\x8dMcq\x85i\xb1" +
	"\xcfk\xeaR\xa6\xf9M\x8c\x02\xd0O\x13\xa4c}&" +
	"\x8e\x89zv\xc7R\xe6/1\xec)\x07\xc40`," +
	"a\xea\xc2\xb0\xb7\x91\xf5\xc1h\x93\x99\xc2c\x8b\xdc\xca" +
	"\x852Sp@qm\x07\xa0\x13\x08\xd2\x87\xfa\xc1%" +
	"\x13oS\xd4xj.2M\x8e+\xf2*\x16\xd2|" +
	"\xe0\xb40EQk\x92q\xc27\x9da\xbe4\xaa\x0a" +
	"\xcb\xd6\xcc\xc9%\x149\xdb\xc2P\xe3F\x14\xbaF\xd4" +
	"w\x01\xd0\x19\x04\xe9<\x9f\x11\xf4y\x00:\x8f ]" +
	"$\xa0(\x08\xa5(\x00\x88\x8f\xff\x04\x80\xa6\x08\xd2\x8c" +
	"\x80F\xc6V'h\x0d)\x96\xd6\xe5\xc5r2\xce\xe3" +
	"\x04\x88  gC\xc6\xdd\xb0~eR\xc9ee\xa2" +
	"\xa6\xdd\x8f\xf1\xe4\xd2\xb4\xbaBaB\xaa\x99\xd5/g" +
	"i\xbd\x91%\x99\xbc\x9c\xa5\xa0\xb7\x02\xc1!\x88\xeb\xc2" +
	"\x80p\xd4\xee\x90_\xa6\xfad\\\x87H\xf7\xf4\xf2\x88" +
	"\xd9\x9d\x97\x09d4\x80\xfef\x8d\xb5\x91\xd9q=\xd9" +
	"\xe2G\x93\x9b2\x8d \x9d#\xa0c\xc9\xecZ\x1f\xc2" +
	"B\xc0\x02\x93\xf2\xc5Y\x04\xe9\xa3}\x9b\x17\xd1\xd5\x8c" +
	"\x9c\xc4B\x10\xb0\x100\xd2\xca\xf7\xc1\x12os@," +
	"\xf1q\x81\xf4\xe4\x02\x0f9Ov\xc2\xccx\x97\xbb\x16" +
	"n\xff\x0e\x00}\x81 \xdd\xef\x03ko\x02\x80~\x9b" +
	" }\xc9\x17\xef\x83\x1c\xc1\x03\x04\xe9Q\x01EBJ" +
	"\x91\x00\x88G^\x06\xa0G\x09\xd2W\x05\x14\x03\x81R" +
	"\x0c\x00\x88?\xe2\x99q\x9c =#\xa0\x18\x0c\x96b" +
	"\x10@<\xc5s\xe8\x0cAzA\xe05GQ\x98\xd6" +
	"\x90B'WJx\xb2\xb8\xa1\xe6\x9f\xe7\xc9\xad\x0cB" +
	"jN\xef\xb6:5\x9eNB\x84)r\xba\xd9K\x0c" +
	"Mm\xd6X6\x8b\xf2r65\xae(\x8d1\x96\xcd" +
	")z\xd6\x13\x88\xeb:\xd3\xd2\x9f\x17\xe2Y\x96jd" +
	"\xcdrV\xd7\xac\xec\xf4\xb2+\xdb\x12\xd7\xf8Gt\xbe" +
	"\xfa\xd33\x97\xd6\xcc_\x11\xa6\xb9\xe5y\xbe\xbd\xc6\x97" +
	"\xe0.\xcbe<\xa1j\xbaS\x0a\xea\x12\xaa\x86z\x8f" +
	"\x14\xf6\xd5\x1f\xb7\xfc\xb4{\x19\x1c\xd3X<\xab\xa6\x9d" +
	"|\xb8C\x11\xe0\xc0q\xab\xd1\xac\xef\x8a\x02=(\xdf" +
	"W\x926z\xf9(\x0ahe\xc0|n\xc1\xa3\x04i" +
	"\xaa?\x0eij\x92\xa5r\x1a \x1b\xa0i\x0e\xbbH" +
	"Ov\xb1\x1a\x93K\x96\xa9\xe6\xeeU\xb5<\\bY" +
	"\x14\x00\x05\xb1\xe8\x0b\x00\x11\xb62\x9e\xd4c\x19\x8d-" +
	"\x96W\x1a+d%\x95\x8ck)\x00p\x03&0\xad" +
	"{\xb8B\xbaE\x80\xffk7\xd2\xec,\xea\xb7\x1b\xf5" +
	"\xc9@\xdegl\x06\x86]\x03\xe2]^\x1du\x0dh" +
	"\xe5l\xc9\x10\xa4\xab}\x0cl\xe3\xbcZK\x90>\xe5" +
	"c\xe0&\xbe\xf8u\x82\xf4\x85O\xa8\x0c\xfb\xc9dG" +
	"+\xd3\x83Lrz\xb9\xca7\x16\xd4\xb4\x0d\x7f\x83\xb5" +
	"\x12\x92\xd54\xf7\xbe\xd2\xf5\xfe\x08\x87\xff0A\xfaC" +
	"\x9f\xf7\xafp\xf8\xbfG\x90\x1e\xf7y\x7f\xac\xddWU" +
	"\x1c\xefOq\xa2\x9c$H_\x13\x10\xed\xf2sv\x89" +
	"Wi\xc4 Z\xe5\xe7<Wy\x8e \xfd\x95\x80\xe2" +
	" \xa1\x14\x07\x01\x88\x97\xf9\xe6o\x11\xa4\xd7\xee6\xcc" +
	"\xb7\xcd\xea\x98U\xde\xba\xf1\x8fiu9(\xd1[\x1a" +
	"\xa6\xb9\xccp\x97cz\x0b\xcf\x0f\x8f2}\xd0\x88\xf1" +
	"p8%\x83\xc7\xc6*\x19> W\xf5\x05\xa46`" +
	" 9\x14?#H\xcfy@\xbe\xfeU\x00\xfa\x1aA" +
	"\xfa\x96\x0f\xc8\x8b[=\xcc\\ \xaf\xf2\xf6\xf5+\x82" +
	"\xf4\x86p\x9bI\xad\xbf\x16{\xfb\x12\xe1d,\xa0\xd6" +
	"k\x0d\xb5\xba\x1c\xc7\x14<\xec\xba}iT\x15\x0f\xc3" +
	"\xee=\xd4`\x9a\xa6j.\xa2\x9a\xa6bOb\xf2." +
	"\xb8\x88 U|\x88\xca\x1c\xa7\x16\x82T\x17\x10m@" +
	"\x97\xfd\x19\x00U\x08\xd2\x95\x1cP\xc1\x024\xc7Q^" +
	"I\x90\xae\x17\xd0he\xd9l\xbc\x99\xcd\x83P[\x86" +
	"\xf9\xb2\xabW\xc6\x85r\x9a<\xc0\xd2\xe9\xb4\x1f\xc1\xa6" +
	"X\xa3\xfd\x0e\xe6\xcc\xeb\x1d\xd6\xf2\xa2\xbe\x83c\xb06" +
	"\xc6\xa9\xb8\x94\xd9\xa3\x8a\xcf\xdbF\xcf\xdb\xbe\x9cuG" +
	"\x95eQ\xbf\xb7A\xdb\xdbZ\xaf^\x0d\xb45\xc4d" +
	"\xd3\x12,\xf1\x8c\xb5\xc6\x18w\xbcq\xed\xb6\xc7\x1b\xd7" +
	"e\xb7\x0b\xdbN\x87\xb4\xff\x9fCR\xbf|oV\xd5" +
	"T\xa2\x8d\xd5\xa0\xb5\xedt5b\xbe\xf7\xe8\xfb\x1c\x99" +
	"\xc1\x04ii\x1f\x1d\xda\xcaKG\xc1\x9c\\\xc4|\xe7" +
	"\x0aJ]\x05k\xb8\xd1\xab\x09\xd2'\xbd\x18l\xa8\xf5" +
	"\x15}\xa7\x13o\xe2\xc9\xf5\x14A\xfa\x1c\x8f\xc1Z+" +
	"\x06\xdb\xf8\xaf\x9f%Hw\xf1Yl\x9d\xc5\xe1\x1d\x09" +
	"o\xbe\xbb\xf3`y\x87\x94c\xbce\xa4\xd8l\x1e\xc4" +
	"\x9e=\x03B\xa9f\xe6\xeb\x00:\xd3\xb4\\F\xd0\xdd" +
	"\x06`-Xe\xeb.f%\xe7\x04\x83\xce\x09\x06U" +
	">w\xbb\x97\x0cX\x1b1\x9b\xab\x1f\xc6Z\x8fzn" +
	"\xec\xd7E=l\xddR\xb8\x81\xa3\xb3\xde\x86\xcc)\x85" +
	";\xf8\xcf\x9f#H\xbf\xed\x9biws;w\x11\xa4" +
	"\x07\x04\x8ch,\xae\xb4\xbai\x1c\xcf\xe9-r\xca\x85" +
	"\x90\xbf\xb62\xbd\x05Bj*\x8b\xc5\x80s\x08\x9a\x1f" +
	"\x8b\x01#\x1a7\x15\xc3\x8e\xf5\xf6\xd1\xd0*\x8c3\x19" +
	"`\x9b\xab\xa6?z\xd7X\xcc\xfd\xdf\xcdE\x0e\x98B" +
	"\xcf\xe3`l\xaa\xd9\x8cz\x14\xc0\xef\xf45\x99$|" +
	"\xf4wp\xcc\xf1>\xa3\x13\xa4k}8\xaey\xd9\xcb" +
	"\xdcOx\xe2\xd7\xccw\xe7N\xa3\x91eC9E\xff" +
	"\xf8O\xdb\xfd\xc6\xcc.\xba&\xdbM\xc0&F\xcd\xa0" +
	"\x8di2\x83\xc6\xc7}$\xe2(\x1e\xc9\x80X1\x1a" +
	" \x96\x95\xd3\xcd\x0a345\x97Nij\x02\x88\x9c" +
	"\x8ei\xf1tJm\x8d,\x96\xb5\xac^\xa2\xc4\xb3z" +
	"\xbf\xf1\xb4\xae\x1e\xddk@\xb1\"\xea\xddF\x89eQ" +
	"\xefb^\x14\x1b\xbd{5Ql\xb2\xf3\xc0\xfa\xc3\x8c" +
	"9^\xef5\x9c\xc9\x1c\x08\xd3\xfcI\xc2y\xf5\x18A" +
	"\xda\xe2\xc3\x91E}\xad\xd3I\x92n\xdd\xc4I\x92e" +
	"M^\xe3p\xe6\xa6\xb0g\xb9}\xa9b~`\x18\xf6" +
	"\xbc\xf03\xc7\x1e\x0e\xc2\x9e[\xf6\xd7\xac\xcfd\x0c{" +
	"\x8e\xda\x9f9Sy:\x92d\\w\xce\x1fu\xf6\x1a" +
	"_\xba\xdd\xb1.+7\xa7\xe3z\xf7\x19\xad\xdf\xcb\x96" +
	"\xb9\xee)\xa7\xe7\xe1\x83\xcf\xfe\x9f#H\xef\xf7\x817" +
	"\x91O\xf4\x0f\x12\xa43\x066\xd1\x0f` w\xee\xe7" +
	"\x88\x9c\xf0\x1d`\x1dx\xee\xfe\x00\xeb\x9cr\xd09\xe5" +
	"D\xccw\xf3B\xc4\xfbg\x92[\x9a}\xd7\x0d\x8d^" +
	"mu\xfc\xdd\x1d\xf5]A8\x1dn\xef\x17|W\x10" +
	"\xceLu\xb0\xc9w\x05\x11 Ve>\xb2\xc47\xf8" +
	"\x06\x03\xd6\x94\xfaJ\xadw/adY6\xcb\xdb\xb9" +
	"\xcf\x83\xbe\x8a6\xaf\xcd\x00\xd0\xbb\x90\x13\xb5\xbb`F" +
	"S\x97C\x89\x9cb\x9a;Z\xdau\xdds\xdeN\xb1" +
	"d\x0b\xcf\xdct\xb3{{4\xd5^@\xd6\xa3\xf57" +
	"\xf9\xda\x93\xdb\xfb\x1b\xed\xf6\xf4u\x1f\x8d\x9e\x1e\x0d@" +
	"\x9f$H\x9f\x15\x10m\x16mi\xf2\x0e\x81b@\xb0" +
	"\x80\xd9\x1e\xf5\xe6\x01\xd3\xee\xd9=\x9dq\xac\xf3%q" +
	"I6\xae\xe8\xae\x80\xac3\xf3\xa6\x04H:\x8b\x83A" +
	"\xc0\xc1\x80\xb1\xa5\xacMai\x0c\x81\x80!_\xd6\xf7" +
	"\xd3S\xd8\x9f\xee\x9b\xee\xf6\xbe\xe9\x7f\x02\x00\x00\xff\xff" +
	"\x13\xc9\xa6\xe6"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_a54fcc87aefc9866,
		Nodes: []uint64{
			0x80a11030a37e1415,
			0x8bcb6e604153a8dd,
			0x8f0aac0bdf879ecb,
			0x9189a38e196e1ee5,
			0x934c3d62b006f8da,
			0x96955ceebafdffa3,
			0x9bf8c21f751ebf99,
			0xa0e05e5fb8875d8b,
			0xa3914d34548bb2a1,
			0xa7a76ed346692835,
			0xa7be87e6ef0aa7cc,
			0xac3d3f012fe6497c,
			0xbf1e3ba20df77b7e,
			0xc8aba2ad7f35b274,
			0xca57740b1d767ccf,
			0xcba85ac7b2406383,
			0xd2e423fd720731b2,
			0xd6edeb45b4137a8a,
			0xda7f1660e0e51156,
			0xdc43324975b1f5f4,
			0xddb4be39c2309db1,
			0xdecf58c214d86357,
			0xdffc4695f4077d99,
			0xe2ea38674be7e974,
			0xe5d184a3d1f73aaf,
			0xe67dc93b96724bdc,
			0xe99a410370f42e83,
			0xec478f32fb5918dc,
			0xed330d91ad002fd4,
			0xee32878ba28c7cc2,
			0xf4a0795fc8af5905,
			0xf4a36356cc57469e,
			0xf5de2c77d40f75ac,
			0xf93c45ad003b0423,
			0xfd32972634c56af3,
		},
		Compressed: true,
	})
}
