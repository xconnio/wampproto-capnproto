// Code generated by capnpc-go. DO NOT EDIT.

package gen

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
)

type Goodbye capnp.Struct

// Goodbye_TypeID is the unique identifier for the type Goodbye.
const Goodbye_TypeID = 0xddb4be39c2309db1

func NewGoodbye(s *capnp.Segment) (Goodbye, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Goodbye(st), err
}

func NewRootGoodbye(s *capnp.Segment) (Goodbye, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Goodbye(st), err
}

func ReadRootGoodbye(msg *capnp.Message) (Goodbye, error) {
	root, err := msg.Root()
	return Goodbye(root.Struct()), err
}

func (s Goodbye) String() string {
	str, _ := text.Marshal(0xddb4be39c2309db1, capnp.Struct(s))
	return str
}

func (s Goodbye) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Goodbye) DecodeFromPtr(p capnp.Ptr) Goodbye {
	return Goodbye(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Goodbye) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Goodbye) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Goodbye) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Goodbye) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Goodbye) Reason() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Goodbye) HasReason() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Goodbye) ReasonBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Goodbye) SetReason(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Goodbye_List is a list of Goodbye.
type Goodbye_List = capnp.StructList[Goodbye]

// NewGoodbye creates a new list of Goodbye.
func NewGoodbye_List(s *capnp.Segment, sz int32) (Goodbye_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Goodbye](l), err
}

// Goodbye_Future is a wrapper for a Goodbye promised by a client call.
type Goodbye_Future struct{ *capnp.Future }

func (f Goodbye_Future) Struct() (Goodbye, error) {
	p, err := f.Future.Ptr()
	return Goodbye(p.Struct()), err
}
