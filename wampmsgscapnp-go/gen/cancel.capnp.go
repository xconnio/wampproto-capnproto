// Code generated by capnpc-go. DO NOT EDIT.

package gen

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
)

type Cancel capnp.Struct

// Cancel_TypeID is the unique identifier for the type Cancel.
const Cancel_TypeID = 0x8bcb6e604153a8dd

func NewCancel(s *capnp.Segment) (Cancel, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Cancel(st), err
}

func NewRootCancel(s *capnp.Segment) (Cancel, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Cancel(st), err
}

func ReadRootCancel(msg *capnp.Message) (Cancel, error) {
	root, err := msg.Root()
	return Cancel(root.Struct()), err
}

func (s Cancel) String() string {
	str, _ := text.Marshal(0x8bcb6e604153a8dd, capnp.Struct(s))
	return str
}

func (s Cancel) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cancel) DecodeFromPtr(p capnp.Ptr) Cancel {
	return Cancel(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cancel) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cancel) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cancel) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cancel) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cancel) RequestID() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s Cancel) SetRequestID(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// Cancel_List is a list of Cancel.
type Cancel_List = capnp.StructList[Cancel]

// NewCancel creates a new list of Cancel.
func NewCancel_List(s *capnp.Segment, sz int32) (Cancel_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Cancel](l), err
}

// Cancel_Future is a wrapper for a Cancel promised by a client call.
type Cancel_Future struct{ *capnp.Future }

func (f Cancel_Future) Struct() (Cancel, error) {
	p, err := f.Future.Ptr()
	return Cancel(p.Struct()), err
}
