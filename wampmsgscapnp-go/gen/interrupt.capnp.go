// Code generated by capnpc-go. DO NOT EDIT.

package gen

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
)

type Interrupt capnp.Struct

// Interrupt_TypeID is the unique identifier for the type Interrupt.
const Interrupt_TypeID = 0xdffc4695f4077d99

func NewInterrupt(s *capnp.Segment) (Interrupt, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Interrupt(st), err
}

func NewRootInterrupt(s *capnp.Segment) (Interrupt, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Interrupt(st), err
}

func ReadRootInterrupt(msg *capnp.Message) (Interrupt, error) {
	root, err := msg.Root()
	return Interrupt(root.Struct()), err
}

func (s Interrupt) String() string {
	str, _ := text.Marshal(0xdffc4695f4077d99, capnp.Struct(s))
	return str
}

func (s Interrupt) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Interrupt) DecodeFromPtr(p capnp.Ptr) Interrupt {
	return Interrupt(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Interrupt) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Interrupt) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Interrupt) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Interrupt) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Interrupt) RequestID() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s Interrupt) SetRequestID(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// Interrupt_List is a list of Interrupt.
type Interrupt_List = capnp.StructList[Interrupt]

// NewInterrupt creates a new list of Interrupt.
func NewInterrupt_List(s *capnp.Segment, sz int32) (Interrupt_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Interrupt](l), err
}

// Interrupt_Future is a wrapper for a Interrupt promised by a client call.
type Interrupt_Future struct{ *capnp.Future }

func (f Interrupt_Future) Struct() (Interrupt, error) {
	p, err := f.Future.Ptr()
	return Interrupt(p.Struct()), err
}
