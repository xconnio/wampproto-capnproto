// Code generated by capnpc-go. DO NOT EDIT.

package gen

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
)

type Call capnp.Struct

// Call_TypeID is the unique identifier for the type Call.
const Call_TypeID = 0xac3d3f012fe6497c

func NewCall(s *capnp.Segment) (Call, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Call(st), err
}

func NewRootCall(s *capnp.Segment) (Call, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Call(st), err
}

func ReadRootCall(msg *capnp.Message) (Call, error) {
	root, err := msg.Root()
	return Call(root.Struct()), err
}

func (s Call) String() string {
	str, _ := text.Marshal(0xac3d3f012fe6497c, capnp.Struct(s))
	return str
}

func (s Call) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Call) DecodeFromPtr(p capnp.Ptr) Call {
	return Call(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Call) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Call) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Call) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Call) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Call) RequestID() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Call) SetRequestID(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Call) Procedure() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Call) HasProcedure() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Call) ProcedureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Call) SetProcedure(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Call) PayloadSerializerID() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s Call) SetPayloadSerializerID(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

// Call_List is a list of Call.
type Call_List = capnp.StructList[Call]

// NewCall creates a new list of Call.
func NewCall_List(s *capnp.Segment, sz int32) (Call_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[Call](l), err
}

// Call_Future is a wrapper for a Call promised by a client call.
type Call_Future struct{ *capnp.Future }

func (f Call_Future) Struct() (Call, error) {
	p, err := f.Future.Ptr()
	return Call(p.Struct()), err
}
