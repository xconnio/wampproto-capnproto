// Code generated by capnpc-go. DO NOT EDIT.

package gen

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
)

type Welcome capnp.Struct

// Welcome_TypeID is the unique identifier for the type Welcome.
const Welcome_TypeID = 0xf5de2c77d40f75ac

func NewWelcome(s *capnp.Segment) (Welcome, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Welcome(st), err
}

func NewRootWelcome(s *capnp.Segment) (Welcome, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Welcome(st), err
}

func ReadRootWelcome(msg *capnp.Message) (Welcome, error) {
	root, err := msg.Root()
	return Welcome(root.Struct()), err
}

func (s Welcome) String() string {
	str, _ := text.Marshal(0xf5de2c77d40f75ac, capnp.Struct(s))
	return str
}

func (s Welcome) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Welcome) DecodeFromPtr(p capnp.Ptr) Welcome {
	return Welcome(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Welcome) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Welcome) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Welcome) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Welcome) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Welcome) SessionID() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s Welcome) SetSessionID(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// Welcome_List is a list of Welcome.
type Welcome_List = capnp.StructList[Welcome]

// NewWelcome creates a new list of Welcome.
func NewWelcome_List(s *capnp.Segment, sz int32) (Welcome_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Welcome](l), err
}

// Welcome_Future is a wrapper for a Welcome promised by a client call.
type Welcome_Future struct{ *capnp.Future }

func (f Welcome_Future) Struct() (Welcome, error) {
	p, err := f.Future.Ptr()
	return Welcome(p.Struct()), err
}
