// Code generated by capnpc-go. DO NOT EDIT.

package gen

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
)

type Unsubscribe capnp.Struct

// Unsubscribe_TypeID is the unique identifier for the type Unsubscribe.
const Unsubscribe_TypeID = 0x8f0aac0bdf879ecb

func NewUnsubscribe(s *capnp.Segment) (Unsubscribe, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Unsubscribe(st), err
}

func NewRootUnsubscribe(s *capnp.Segment) (Unsubscribe, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Unsubscribe(st), err
}

func ReadRootUnsubscribe(msg *capnp.Message) (Unsubscribe, error) {
	root, err := msg.Root()
	return Unsubscribe(root.Struct()), err
}

func (s Unsubscribe) String() string {
	str, _ := text.Marshal(0x8f0aac0bdf879ecb, capnp.Struct(s))
	return str
}

func (s Unsubscribe) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Unsubscribe) DecodeFromPtr(p capnp.Ptr) Unsubscribe {
	return Unsubscribe(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Unsubscribe) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Unsubscribe) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Unsubscribe) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Unsubscribe) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Unsubscribe) RequestID() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s Unsubscribe) SetRequestID(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s Unsubscribe) SubscriptionID() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Unsubscribe) SetSubscriptionID(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

// Unsubscribe_List is a list of Unsubscribe.
type Unsubscribe_List = capnp.StructList[Unsubscribe]

// NewUnsubscribe creates a new list of Unsubscribe.
func NewUnsubscribe_List(s *capnp.Segment, sz int32) (Unsubscribe_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Unsubscribe](l), err
}

// Unsubscribe_Future is a wrapper for a Unsubscribe promised by a client call.
type Unsubscribe_Future struct{ *capnp.Future }

func (f Unsubscribe_Future) Struct() (Unsubscribe, error) {
	p, err := f.Future.Ptr()
	return Unsubscribe(p.Struct()), err
}
