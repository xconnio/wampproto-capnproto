// Code generated by capnpc-go. DO NOT EDIT.

package gen

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Abort capnp.Struct

// Abort_TypeID is the unique identifier for the type Abort.
const Abort_TypeID = 0xa7be87e6ef0aa7cc

func NewAbort(s *capnp.Segment) (Abort, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Abort(st), err
}

func NewRootAbort(s *capnp.Segment) (Abort, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Abort(st), err
}

func ReadRootAbort(msg *capnp.Message) (Abort, error) {
	root, err := msg.Root()
	return Abort(root.Struct()), err
}

func (s Abort) String() string {
	str, _ := text.Marshal(0xa7be87e6ef0aa7cc, capnp.Struct(s))
	return str
}

func (s Abort) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Abort) DecodeFromPtr(p capnp.Ptr) Abort {
	return Abort(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Abort) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Abort) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Abort) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Abort) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Abort) Reason() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Abort) HasReason() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Abort) ReasonBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Abort) SetReason(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Abort) PayloadSerializerID() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Abort) SetPayloadSerializerID(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// Abort_List is a list of Abort.
type Abort_List = capnp.StructList[Abort]

// NewAbort creates a new list of Abort.
func NewAbort_List(s *capnp.Segment, sz int32) (Abort_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Abort](l), err
}

// Abort_Future is a wrapper for a Abort promised by a client call.
type Abort_Future struct{ *capnp.Future }

func (f Abort_Future) Struct() (Abort, error) {
	p, err := f.Future.Ptr()
	return Abort(p.Struct()), err
}

const schema_a54fcc87aefc9866 = "x\xda\xecY}t\x14\xd7u\xbfw\xde.\x8b\xbew" +
	"\x18\x01\x92\x90\xb4v\x93\xa66\x0d2\x08h\xed\xc5\xb0" +
	"V@\x06\xd9P\xf3\x04\x04\xa3c\x1afw\x1f\xd2\xc0" +
	"hg\x99\x9d\x05D \x86\x14\x17SB\x1c\x88I\x83" +
	"c(\x88Pp\x0a\xc5\xa8p\x0eq\xf3e\x1dsB" +
	"\x03\xe7$P\xc8\xb1s\xc0\xc6\xc4\xd8\xa1\x09\x09!8" +
	"\xb8v\xe8\xf4\xbc\xf9\xd6\x17\x88\xb6\xf1_\xfdK3o" +
	"\xee\xdew\xef\xef\xfe\xee\xc7{\x1a;\xaa\xf0\x91\xd0\xb8" +
	"\x92\xf9\xc3A\xa0\x1f\x84\x87\x98\xc3\xcb\xbf\xb0glt" +
	"\xf7Z\xa0\"\x0a\xe6\x94\x9f\x84\xa6\xbcv\xb3\xe9:\x84" +
	"\"\x00\xd2\x96\xc2K\xd2\x8eB\xfe\xb4\xbdp\x05\xa0y" +
	"a\xff\x9c\x86E\x99\x93\x9b\x80\x96 \x9a\xefUo\x9b" +
	"\xf9\xe6\xfe\x9d;m\xd9[\x85\x9dR\xb8\x88?aQ" +
	"\x02\xd0<\xb9s\xc3[E\x07\x0a\x9f\x03:\x0c\x05\xf3" +
	"\x8d\xb8>\xad\xf5\xe7\xdf\xf9\xa9-\xfb\xa7E\xd7\xa5q" +
	"\x96\xec\x98\"\xae\xf7rm\xa6\xf2\xcb{6n\x01q" +
	"\x04\x9a\x07\xf2egW|\xfa\xcd\xf7!,X6\x14" +
	"]\x92v\x14\xfd\x19\x80t\xd8\x92\xfd\xd9\x07C^N" +
	"N\x9e\xf9U\xa0\xc5(\x98f\xe5\xd2\xc3\xeb~\xf8\xcb" +
	"\xd7l\xbd%\xc5[\xa5\xe1\xc5\xfcI,\xe6\xb2{\xcc" +
	"[\xaf\xfc\xfa\xa9m_\x03Z\x81\xf8\xd1\xd9\x07\x0en" +
	")\x19\x7f\x95K\x8e\xef(\x1e\x86\xd2FK\xf4\x99\xe2" +
	"C\x80\xe6\xf6\xef\xd7\xe6c\xdd\x1f|\x03h\x14\x85\xff" +
	"R\xc6\xdcs\xea\xd5)\xd7,\xa5\x0f\x95\x9c\x91\x1aK" +
	"\xf8SC\x09W\xbai\xe1\x86c\x9f\xfb\xeb\x8b\xbb," +
	"IsE\xfe\xf7sB\xfa\x95c\x10F.\xb2\xb7\xe4" +
	"\x8ct\xb8d$\x80\xf4\xed\x12\xaevw\xd7\xa6\xb9\x13" +
	"fm\xd9\x03\xb4\x1a\x03~Z6\xcc+\xadB\x89\x95" +
	"\xf2G\xb9t>\x02\x9a\x13\xefS\x1e\xfd\xf7\xcc\xbe}" +
	"@%DsU\xf2\xc1\x19E\xeb\xaf\xfd\xde\x96~\xa3" +
	"L@\xe9r\x19\xdf\xe4\xed2\x0e\xf0\xa9}\x85\xbfy" +
	"w\xc3\xf7\xf6q \xd0\\\xfc\xf5?\xfc\xf3\x86SO" +
	"\xecu\xec\x08G\xb7J%Q\xfeT\x10\xe5F\xafn" +
	"z\xf7\x01LL>\x00\xb4\x08\x05s3\xf9\x8bO\xbd" +
	"\xd8\xd2z\xc5\x11n\x8f~QZ\x16\xb5\x9f\xb8\xd1_" +
	"\xf8\xfc\xcd\x92\xceI\xb5\xdf\x07\xb1J\xf0\xdd\x05\x1c?" +
	"\\\x14P\xbaW\xe4\x925\xe2\x13\x80\xa6\xd15\xf1\xe9" +
	"\x83\x9d\xfft\xc2&\x8f\xf8/++\xb2\x9f\xfc\xdb\x97" +
	"\xec`L\x14/I\x0d\x96\xecd\x91\x9b\xf0\xe3\xd5\xcb" +
	"k\x8a\x8c\xf9?\xea\x0f\x8a\xddb\x15J\x87-\xe1\x83" +
	"\xe2{\x80\xe6\xdf\xa4\x1e\xe9\xfaa\xcb\xfe\x93\\q\xc8" +
	"\xac\x9ey\xb2f\xd2\xd8\xdf\\\x800\xe1\"/\x0d\xbb" +
	"$\x1d\x1d\xc6\x7fwx\xd8s\x1c\xb7\xaeq\x11\xfd\xd6" +
	"'\xde9\xc3\xa1\x08\x99\x05\xbf\xaa\xdb\xfc\xf2\xb9\xec\x0f" +
	"\x1c\xe9y\xe5[\xa5\x85\xe5\\zA\xb9%\xfdw\xab" +
	"\xa4#\x8d\xbf\xbc\xfaS.M\xcc\xaf\xee\xff\xc7C\x97" +
	"\xfe\xf5\x1b/8X\xe0\x88\xadR\xc1\x08\x0b\xc2\x11\xdc" +
	"\x90\xcf\x8a\x97/.\x1a\xf1\xf4\xcf\x80\x96\xa1`\x1e\xb9" +
	"o\x11\x99\xb0\xfa\xc8?8\xc2WFtK\xbf\x1d\xc1" +
	"\xb9\x19\x1e\xc9\x85o\xbc\x7f8\xdfT?\xf5\xbc\x0dG" +
	"\xe3\xceu\xd3\xff\xaa\xeb\xf3\xe7l8\xde\x1eyI\xba" +
	":\xd2\xfa\xd5H\x0e\xc7\xe1\x1dc\xbb\x1f\xfa\xde\x91\x0b" +
	" \x96\xa2\xf9\xd4\xe2m\xd3\xa7/o\xba\xee\xe8\x9dU" +
	"\xd1%\xcd\xab\xe0O\xb4\x82\x87z~\xea\xf5\xf2\xee'" +
	"\x7f\xfc&\xd0R$\xe6_>>\xe5\xfc\xc6\xf1\xfa5" +
	"GxYE\x97\xd4a\x09\xe7+\xb8\x11\xdb\xd7Dn" +
	"l{\xf4\x0foq~\xa2\xd90\xed\xde\xa6\x03\x07n" +
	"\xbee\x1b\xb1\xa0\xf2\x8c\xc4*\xf9\x93\\\xc9\x15\x1bW" +
	"\xde{\xbc\xf5\xc1\xff\xb8\x04b1\x9a\xb5\x87\x0e=\xf0" +
	"\xfc\xd6!\xd7!l\xc9>S\xb9U\xda\\\xc9\xa9\xbc" +
	"\xad\x92\xeb=\x14\xbfyz\xcf\xfa\xd3\x97A\xac\x10|" +
	"X\x00\xa55U\xd7\xa5\x8dU\xd6O\xaa8)\xce?" +
	"\xae\x7fm\xd2\xbf\xady\xb7O\xd6I;\xaa>\x94^" +
	"\xb2$\xf7VYQ\xae\xbb\x91%\x0d/\\\xe1\xf5D" +
	"0\xf7\x1e\xfb\xf3/\x1f\x1f\x9dtL\xdd2\xaaS\xda" +
	">\x8a?m\x1b\xc5\xf1:_\xb1\xe0\xa3\xfa\xe7\xa6\xff" +
	"\xaa\xcf\xf6\xb7F}(\x15T[\x11\xab~\x1a\xbc\x0d" +
	"\xc5a\x01\xf7l\x8f&WwK\x8d\xd5\xd3\x01\xa4\x8e" +
	"j\xbe}\xf7\xea/un\xdaP\xffk\x10%4g" +
	"\xbd\x9f[R\xb6\xaa\xe6\xe76\xaa\xe3\xe7\xd5\x08(\xc9" +
	"5\xfcg\x0bk8T\xe1\x05\x87N|\xaec\xd7\x8d" +
	"\xbe\xb5d]M\x15J[,\xd1\xcd5\xdc\xd4\x9d\x8f" +
	"\xce?\xf5\xd9\xd4\x9e\x1bV\x1a\xdf*,\x9c\x1c;w" +
	"\xfa\x90%z\x8bk-\xa8\xb5\x8c\xad\xe5Z\xbdbG" +
	"K\x11\xcd}O|Dj\xee7/B8\xccE\xee" +
	"\xaf\xed\x92\xc6\xd5\x8e\x04\x18\xffP-\xaf\x0f7?\x11" +
	"\x9at\xb0\xf1\xe1\xff\xb4\x02\xfb\xbb]s~\xdb\xdc\xb2" +
	"\xfdY\x87\xe5\xdbbg\xa4\xdd1\xbe\xc7\x8eX\x8c\xb3" +
	"\xfcwK\x8eO\xf8\xd4\xdf\xd7\xdf\xea\x1b\x85o\xdf\xf3" +
	"\xa1t\xfc\x1e.\xfa\xea=\xf3\x11L\x18m\xe6\xf2\xc9" +
	"\\JW\x92\x02K\xd7\xa5\xe4l&\x1b\x9fc\xafD" +
	"\x92,=\x1b\x91\x0e%!\x80\x10\x02\x88\xf77\x03\xd0" +
	"\xfb\x08\xd2\x09\x02\x8a\x88\xe5\xc8\x17\xc7\xad\x02\xa0c\x09" +
	"\xd2\x87\x054u\xb6,\xcfrF\x13\xe04,\x00\x01" +
	"\x0b\x00\xdd\x0d\xb2\x900\x14-\xd3\xe4\x7fH\xc9\x99\x14" +
	"S\xebRh\xed:U\xceDRL\xe5;\x86\xbc\x1d" +
	"K\xf8\x8e\xc5\x04i\xc5\x00\xca\xf3\x19[\xbd\xa0$\x99" +
	"c\xfe<k)\xc6}b\x7fT\xfbW05\xa5\xb5" +
	"\xb3:\xc1\xdew\xbe\xf3\xda\xacET\x96\xa3C1\xd0" +
	"\x02\xc4\x82\xb8_\x04\xc5p<1\x8d\xc9*\xd3\x13\x9f" +
	"\xd1\xb5\xa5L\x0f\x9a\x18\x07\xa0\x9f$H\xc7\x06L\x1c" +
	"\x13\xf7\xedN\xa4\xad_b\xd4W\x0e\x88Q\xc0D\xd2" +
	"\xd2\x85Q\x7f#\xfb\x83\xd9\xa10\x95\xc7\x16\xb9\x95\x0b" +
	"\x14\xa6\xe2\xa0\xe2\xda\x09@'\x10\xa4\x8f\x0c\x80KV" +
	"\xeeP59=\x07\x99\xae\xc8\xaa\xb2\x8aE\xf4\x008" +
	"mLU\xb5\xba\x94L\xf8\xa63\xac\x97fMe\xb9" +
	"\xba\xd9\xf9\xa4\xaa\xe4\xda\x18\xea\xdc\x88b\xcf\x88\xc6n" +
	"\x00:\x83 \x9d\x1b0\x82\xbe\x00@\xe7\x12\xa4\x8b\x04" +
	"\x14\x05\xa1\x1c\x05\x00q\xe1\x8f\x00h\x9a \xcd\x0ah" +
	"f\x1du\x82\xde\x94f\x19CY\xac\xa4d\x1e'@" +
	"\x04\x01y6d\xbd\x0d\x1bW\xa6\xd4|N!Z\xc6" +
	"\xfb(\xa7\x96f\xb4\x15*\x13\xd2\xad\xacq9\xcb\x18" +
	"\xcd,\xc5\x94\xe5,\x0d}\x15\x08n\x82x.\x0c\x0a" +
	"G\xfd\x0e\xfc\xb2\xd4\xa7d\x03b=\xe9\xe5'f\xcf" +
	"\xbcL\"\xa3!\x0c\xb6j\xac\x8f\xcd\x92\x8dT[\x10" +
	"Mn\xca4\x82t\xb6\x80\xae%\xb3\xea\x03\x08\x0b!" +
	"\x1bL\xca\x17g\x12\xa4O\xf6o^\xcc\xd0\xb2J\x0a" +
	"\x8bA\xc0b\xc0X;\xdf\x07\xcb\xfc\xcd\x01\xb1,\x90" +
	"\x0b\xa4w.\xf0\x90s\xb2\x13f\xc5\xbb\xc2\xb3p\xfb" +
	"\xb7\x00\xe8\x8b\x04\xe9\xfe\x00X{\x93\x00\xf4\x9b\x04\xe9" +
	"\xcb\x81x\x1f\xe4\x08\x1e H\x8f\x09(\x12R\x8e\x04" +
	"@<\xfa\x0a\x00=F\x90\xbe&\xa0\x18\x0a\x95c\x08" +
	"@|\x953\xe3\x04AzV@1\x1c.\xc70\x80" +
	"x\x9as\xe8,AzQ\xe05GU\x99\xde\x94F" +
	"\x97+e\x9c,^\xa8\xf9\xe7\xb9J;\x83\x88\x967" +
	"z\xacN\x953)\x881U\xc9\xb4\xfa\xc4\xd0\xb5V" +
	"\x9d\xe5r\xa8,gSeUmN\xb0\\^5r" +
	"\xbe\x80l\x18L\xcf|F\x90s,\xdd\xccZ\x95\x9c" +
	"\xa1\xdb\xec\xf4\xd9\x95k\x93u\xfe\x11\xdd\xafAz\xe6" +
	"3\xba\xf5+\xc2t\xaf<\xcfs\xd6\xf8\x12\xdce\xb9" +
	"\x94\x93\x9an\xb8\xa5\xa0!\xa9\xe9h\xf4\xa2p\xa0\xfe" +
	"x\xe5\xa7\xd3gpBgrN\xcb\xb8|\xb8C\x11" +
	"\xe0\xc0q\xab\xd1\xaa\xef\xaa\x0a\xbdR\xbe?\x926\xfb" +
	"|\x14\x05\xb4\x190\x8f[\xf0$A\x9a\x1e(\x87t" +
	"-\xc5\xd2y\x1d\x90\x0d\xd247\xbbH\xef\xecbu" +
	"V.\xd9\xa6Z\xbb\xd7\xd4\xf3p\x89\xc3\xe3\x00(\x88" +
	"%\x8f\x01\xc4\xd8J9e$\xb2:[\xac\xac4W" +
	"(j:%\xebi\x00\xf0\x02&0\xbdg\xb8\"\x86" +
	"\x9d\x00\xff\xdbn\xa4;,\x1a\xb0\x1b\xf5\x9b\x81\xbc\xcf" +
	"8\x19\x18\xf5\x0c\x90\xbb\xfd:\xea\x19\xd0\xce\xb3%K" +
	"\x90\xae\x0ed`\x07\xcf\xab\xb5\x04\xe9\x97\x02\x19\xb8\x91" +
	"/~\x85 }\xf1c*\xc3\xc1dr\xa2\x95\xed\x95" +
	"LJf\xb9\xc67\x16\xb4\x8c\x03\x7f\x93\xbd\x12Q\xb4" +
	"\x0c\xf7\xbe\xda\xf3\xfe(\x87\xff\x08A\xfa\x83\x80\xf7\xdf" +
	"\xe5\xf0\x7f\x87 =\x11\xf0\xfexg\xa0\xaa\xb8\xde\x9f" +
	"\xe6\x89r\x8a }]@t\xca\xcf\xb9%~\xa5\x11" +
	"\xc3h\x97\x9f\x0b\\\xe5y\x82\xf4\x17\x02\x8aC\x84r" +
	"\x1c\x02 ^\xe6\x9b\xbfC\x90^\xbb\xdb0\xdf\x96\xd5" +
	"\x09\xbb\xbc\xf5\xc8?\xa67\xe4\xa1\xcchk\x9a\xe6e" +
	"\x86\xb7\x9c0\xda8?\xfc\x94\xe9'\x8d\x18\x0f\x87[" +
	"2xl\xec\x92\x11\x00rU\x7f@\xea\x83\x06\x92C" +
	"\xf1\x13\x82\xf4\xbc\x0f\xe4\x1b_\x04\xa0\xaf\x13\xa4\xef\x04" +
	"\x80|{\xab\x8f\x99\x07\xe4U\xde\xbe~A\x90\xde\x10" +
	"n3\xa9\x0d\xd4bo_\"\\\xc6\x02\xea}\xd6P" +
	"o\xc8sL\xc1\xc7\xae\xc7\x97fM\xf51\xec\xd9C" +
	"M\xa6\xeb\x9a\xee!\xaa\xeb\x1a\xf6NL\xde\x05\x17\x11" +
	"\xa4j\x00Q\x85\xe3\xd4F\x90\x1a\x02\xa2\x03\xe8\xb2?" +
	"\x01\xa0*A\xba\x92\x03*\xd8\x80\xe69\xca+\x09\xd2" +
	"\xf5\x02\x9a\xed,\x97\x93[\xd9\\\x88tdY\x80]" +
	"}\x18\x17\xc9\xeb\xca K\xa7\xdb~\x04'\xc5\x9a\x9d" +
	"w\xb0f^\xff\xb0V\x10\x0f\x1c\x1c\xc3\xf5\x09\x9e\x8a" +
	"K\x993\xaa\x04\xbcm\xf6\xbd\xed\xcfYoTY\x16" +
	"\x0fz\x1bv\xbc\xad\xf7\xeb\xd5`[CB\xb1,\xc1" +
	"2\xdfX{\x8c\xf1\xc6\x1b\xcfng\xbc\xf1\\\xf6\xba" +
	"\xb0\xe3tD\xff\xbf9$\x0d\x98\xef\xad\x9a\x96Nv" +
	"\xb0:\xb4\xb7\x9d\xae\xc5\xac\xf7^}\x9f#3\x94 " +
	"-\xef\xa7C\xdb\xbct\x15\xcc\xce\xc7\xac\xf7^\x8c\xeb" +
	"/\x06\xf5\x81\xf6\xe0v\xe2\xf6\xce@{ k\xed\x18" +
	"t<\x16`\xdc\x1dg\xc8;\xb0\x8b\xadT\xf3i6" +
	"\x8bA\x8f\xb2n0]\xcfg\x05\xc3\xab\xea\xf6\x82]" +
	"\x8b\xeeb\x00r\x8f%\xe8\x1eKP\xe3\xc3\xb4ws" +
	"\x80\xf51\xabc\x06\xb1\xe18<E\x90\xb6\x05\x02\xca" +
	"\xe2\x81\x14u\xeb\x9b\x92tX\xbb>P\xdf\xd6\xf1\x9f" +
	"\xaf&H\x9f\x150\xa63Ym\xf7h(\xe7\x8d6" +
	"%\xed\xe1\xc2_\xdb\x99\xd1\x06\x11-\x9d\xc3R\xc0\xd9" +
	"\x04\xad\x8f\xa5\x801\x9d[\x85Q\xd7P\xe7h7P" +
	"*\xd6\xd9Y\xf6?\x9ba\\\x8c\x84\xdeG\xb7\xc4T" +
	"\xabq\xf4\xa2\xce\xb7\xfa\x9b\"\x92\x81Tu\xe1\xc9\xf3" +
	"\x9e`\x10\xa4k\x03\xf0\xacy\xc5\x1f->\xe6\xe9\\" +
	"\xb7\xde\xdd\xfb\x87f\x96\x8b\xe4U\xe3\x8f\x7f2\x1e0" +
	"fN\x81\xe4\x16\xd8\x80M\x8c[A\x1b\xd3b\x05\x8d" +
	"\x8f\xe6H\xc4{y$Cb\xe5h\x80DN\xc9\xb4" +
	"\xaa\xcc\xd4\xb5|&\xadkI J&\xa1\xcb\x99\xb4" +
	"\xd6\x1e[\xac\xe89\xa3L\x95s\xc6\x80\xf1\xb4o\x09" +
	"\xbd+;\xb12\xee\xdf\x1c\x89\xc3\xe3\xfe\x15\xba(6" +
	"\xfbw`\xa2\xd8\xe2\xf0\xc0\xfe\xc3\xcc\xd9~\x9f4\xdd" +
	")\x1a\x08\xd3\x83$\x89\x0f:\x87\x82\x95\xdf%\xc9\xb2" +
	"\x16\xbf\xea\xb83N\xd4\xb7\xdc\xb9\x00\xb1>0\x8c\xfa" +
	"^8Y\x12l\xe4Q\xdf-\xe7k.`2F}" +
	"G\x9d\xcf<+9\x1dIJ6\xdc\xb3B\x83\xb3\xc6" +
	"\x97nw\x04\xcb)\xad\x19\xd9\xe89O\x0dx12" +
	"\xc7;\x91\xf4>(\xf09\xfd\xd3\x04\xe9\x83\x01\xf0&" +
	"\xf2\xe9\xfba\x82t\xc6\xe0\xa6\xefA\x0c\xcf\xee]\x1a" +
	"Q\x92\x81\xc3\xa6\x0b\xcf\xdd\x1f6\xdd\x13\x09\xba'\x92" +
	"\x98\xf5n]^\xf8\xff\xf6\xf1*n\xe0j\x80k\xfe" +
	":A\xfaM\xbf\x1b\xed\x8e\x07\xae\x0b\xdcn\xb4\xf7\xb1" +
	"\xc0u\x81;\xff\x1cl\x09\\\x17\x84\x88=Q\x1e]" +
	"\x12\x18R\xc3!{\xa2\xfcn\xbd\x7f\x87`\xe6X." +
	"\xc7[o\xc0\x83\xfe\x0a4\xaf\xc3\xbc5\xf5)\xdaD" +
	"\xeb)\x98\xd5\xb5\xe5P\xa6\xa4\x99\xee\x8d\x81N\x0d\xf7" +
	"\x9dw(\x96j\xe3\xcc\xcd\xb4z7=S\x9d\x05\xb4" +
	"\x8b\x81\x07\xcc\x9a\x16\xbf\x97xLx\x86\xa3\xb5\x9e " +
	"\xfdJ \x8d6\x8f\x06\xa0\xcf\x12\xa4\xcf\x0b\x88N\x16" +
	"mi\xf1\x0flbH\xb0\x81\xd9\xceq}\x9e \xdd" +
	"%\xd8v\xcf\xea\xed\x8ck]\x80\xc4e9Y5<" +
	"\x01\xc5`\xd6\xad\x06\x90L\x0e\x87\x82\x80C\x01\x13K" +
	"Y\x87\xca2\x18\x01\x01#\x01\xd6\x0f\xd0S\xd8\xff\xdf" +
	"\x0d\xdd\xed\xdd\xd0\x7f\x07\x00\x00\xff\xff\xbaS\x94\xbf"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_a54fcc87aefc9866,
		Nodes: []uint64{
			0x80a11030a37e1415,
			0x8bcb6e604153a8dd,
			0x8f0aac0bdf879ecb,
			0x9189a38e196e1ee5,
			0x934c3d62b006f8da,
			0x96955ceebafdffa3,
			0x9bf8c21f751ebf99,
			0xa0e05e5fb8875d8b,
			0xa3914d34548bb2a1,
			0xa7a76ed346692835,
			0xa7be87e6ef0aa7cc,
			0xac3d3f012fe6497c,
			0xbf1e3ba20df77b7e,
			0xc8aba2ad7f35b274,
			0xca57740b1d767ccf,
			0xcba85ac7b2406383,
			0xd2e423fd720731b2,
			0xd6edeb45b4137a8a,
			0xda7f1660e0e51156,
			0xdc43324975b1f5f4,
			0xddb4be39c2309db1,
			0xdecf58c214d86357,
			0xdffc4695f4077d99,
			0xe2ea38674be7e974,
			0xe5d184a3d1f73aaf,
			0xe67dc93b96724bdc,
			0xe99a410370f42e83,
			0xec478f32fb5918dc,
			0xed330d91ad002fd4,
			0xee32878ba28c7cc2,
			0xf4a0795fc8af5905,
			0xf4a36356cc57469e,
			0xf5de2c77d40f75ac,
			0xf93c45ad003b0423,
			0xfd32972634c56af3,
		},
		Compressed: true,
	})
}
