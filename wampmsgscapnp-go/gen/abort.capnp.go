// Code generated by capnpc-go. DO NOT EDIT.

package gen

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Abort capnp.Struct

// Abort_TypeID is the unique identifier for the type Abort.
const Abort_TypeID = 0xa7be87e6ef0aa7cc

func NewAbort(s *capnp.Segment) (Abort, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Abort(st), err
}

func NewRootAbort(s *capnp.Segment) (Abort, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Abort(st), err
}

func ReadRootAbort(msg *capnp.Message) (Abort, error) {
	root, err := msg.Root()
	return Abort(root.Struct()), err
}

func (s Abort) String() string {
	str, _ := text.Marshal(0xa7be87e6ef0aa7cc, capnp.Struct(s))
	return str
}

func (s Abort) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Abort) DecodeFromPtr(p capnp.Ptr) Abort {
	return Abort(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Abort) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Abort) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Abort) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Abort) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Abort) Reason() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Abort) HasReason() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Abort) ReasonBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Abort) SetReason(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Abort_List is a list of Abort.
type Abort_List = capnp.StructList[Abort]

// NewAbort creates a new list of Abort.
func NewAbort_List(s *capnp.Segment, sz int32) (Abort_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Abort](l), err
}

// Abort_Future is a wrapper for a Abort promised by a client call.
type Abort_Future struct{ *capnp.Future }

func (f Abort_Future) Struct() (Abort, error) {
	p, err := f.Future.Ptr()
	return Abort(p.Struct()), err
}

const schema_a54fcc87aefc9866 = "x\xda\xbcW}p\x14g\x19\x7f\x9f}/\\\x93\\" +
	"\x92\xdb\xecE\xa9Szbm\x07j\x09\x1f\xa1\x8a\xa1" +
	"\x90\xa6\x10\xc2\x0d`\xf3\x06(4\x83\x96\xbd\xbd\x97\xcb" +
	"\xc2\xe6\xf6\xba\xbb\x07\x04\xc1\x82\xadR\xa4QIM5" +
	"\x94\"\x05\x11\xd4` \xc2\x0cT[M\x06\xa6 8" +
	"Z\x84\x8e\xed\xf0\xd5\xd4\xc2`\xa5\xa5\x14J)\x8d\xeb" +
	"\xbc\xbb{{\x9b\xa4\x81\xe0\x80\x7f\xdd\xfb\xf1\xbb\xe7\xf3" +
	"\xf7>\xcf\xb3#\xae\x0ex\xd072\xafR@\x1c9" +
	"\x955\xc0,\x0a}g\xd3\x88\xe0\x8b\xcb\x11\xe1\x813" +
	"\xc7\xff\xcd7~\xef\xe5\xc8\x05\xe4\xf3#$\xac\xca\xee" +
	"\x14\x9a\xb2\xd9jM\xf6\"\x04\xe6\xf1\xad\xd3\xcb\xe7&" +
	"\x0e\xaeF$\x0f\xc0<sG\xd3\xd4\x13[\xd7\xaf\xb7" +
	"\xb1\x97\xb27\x0a]\x16\xf6Jv\x19\x02\xf3\xe0\xfa\x95" +
	"'s[r~\x84H!p\xe6\x1b\xa5\xda\xc4\xf8\xdb" +
	"\x7fx\xdd\xc6\x0e\xca\xb9 \x0c\xcda\xab\xbbs\x98\xdc" +
	"7?\x1e\xb0=:n\xea\xb3\x88\x04\x00L\xf3\xf6\x05" +
	";V\xbc\xfa\xee^\xc7\x86\x9cFa\x8d\x85m\xc8a" +
	"r7\x99]/\xbd7\xa7\xe99D\x06\x02\\=2" +
	"|\xdb\x9a\xbc\x92s\x0cY\xb2#\xa7\x10\x84v\x0b\xfa" +
	"r\xce\x19\x04f\xf3\x1f\xefL\x85;>~\x1e\x91 " +
	"p\xff\x91\x87}\xf1P\xfb\xf8\xf3\x96\xd0=\xb9\x87\x85" +
	"}\xb9l\xd5\x9e\xcb\x0cX\xfd\xcd\x95\xbb\x1f\xfb\xd6\xa9" +
	"\x0d\x0c\x09\xe6\xa2\xd4G\xd3}\xda\xd9\xdd(\x0b,\x1b" +
	"\x03\x87\x85\x91\x01\xb6\x1a\x16`\xe0\xfb\x87\xc8\x93\xfe\x9e" +
	"\xd8\xb2\x05\x11\x01\xc0\\\x12\x1d39\xf7\xa9\xf3\x1fY" +
	"\xd6\x964\x048\x10\x9a-pS\x80\x99{hK\xce" +
	"\xfb\xa7W\xbe\xb2\x05\xf1\x010\xe7\xfd\xec\xd3\xdf\xae<" +
	"\xf4\xf0fG\xf0\x9e@\xa3\xd0na_\xb6\xb0K#" +
	"\xa7\x87C\xd9\xb8\x16Dr\x01\xcc\x06\xfc\xd5{\xd6\xd5" +
	"\xc4\xcf:\xe0\xe3\x81\xef\x0ao\x05\xec\x15\xb3\xc2h\xbb" +
	"\xff\x89m\x1b\x7f\xb3\xdf\xce\x1b\xff\xbb\xc5\x03\x93_\xfe" +
	"\xfe\xaf\xec\x98\x95\xe7u\x0a\xd3\xf2\xd8*\x92\xc7\xb0O" +
	"J\x0f\xb6\xbdZ\xb3\xf5\xa0\x8d\xbdc\xea\xc1AcG" +
	"\xbc\x7f\xdc\xc6n\xcb\xeb\x14\xf6X\xd8]\x16\xb6m\xa4" +
	"_\xeb\xba\xeb\x9f\x87Y.83\xfb\xdf\xc5\x0d\xdb\x8f" +
	"&\xffdco\xcfo\x14\x06\xe7[\x19\xccg\xd8\x1f" +
	",\x11vV\xbc{\xeeu\x1b\xfb\xec\xd6_\xb6v\xfe" +
	"\xfe\xf9\xb5\x8e\xc1+\xf2\x1b\x85U\x16\xf8{\xf9\xad\x08" +
	"\xccG\xf8wN\xcd\xfd\xdc\x13o\"R\x00`\xee\x1c" +
	"2\x17\x8f^\xba\xf3\xe7\xe9\x18\x17t\x08\xc3\x0a\xd8j" +
	"h\x01\x93|\xf1\xd2\x8eTd\xd4\x84c\xb6\xc5\x15\xeb" +
	"WT~\xa3\xed\xdbGm+\x1a\x0a:\x85f\x0b\xdb" +
	"daw\xbc0\xa2\xe3\xeb\xaf\xec<\x8e\xf8|0\xe7" +
	"\xcck\xaa\xac\\\x18\xb9\xe0\xc8\xbdR\xd0&@\x90\xad" +
	"\xba\x0aX\x88gI\xff\x08u\xcc\xfe\xeb\x09D\xf2\x01" +
	"\xcc\xafM\x19\x7flU\x89v\xde\x01\x0f\x0a\xb6\x09w" +
	"[\xe0\xc1A&\xb8y\x99\xffb\xd3\xa4OO\xda\xac" +
	"(\x9f88\xd2\xd2r\xf9\xa4m\xc4\x8a\xe0a\xa1\xc1" +
	"\xc2\xae\x0a2\xc1\xc6\xd93S\xe2c\xfe\xd5i\xe5\xf9" +
	"\xce\xd6\xd6\xe1?i\x1cp\x01e\xd9!\x0e6\x0a\xbb" +
	"\x82\x9fgy\x0e2^\x1e\x9b\xa2=7\xf6\xc0\xb2\xd3" +
	"\xbd(,l\xe6?\x11v\xf0\xd6\x7fx\x86|\xb2\xf8" +
	"b\x12\x97\xaf=k?\xb8\xcd\xbb\xbf\xf2\xc3}\xf7F" +
	"\x1d\x0b\x9a\x0b7\x0a/\x16\xb2\xd5\x0b\x85e\xc8\x95\xc3" +
	"\x17z\x8c\xb1\xf5\xb7\x17v\x08\x07\x0a+Y\x10\x0a\x99" +
	"\xd4\x8e\xa5\xcfl\\\xbdr\xd4{\x88\x17\xc0\x9cvI" +
	"\x9f_\xb0d\xd0\xdbv\x0cJ\xde\x108\x10\xde\x11\xd8" +
	"\xdf\xde\x12\x98cY\x8f\xb6\xee\x7f\xac~\xc3\xc5\xde\xef" +
	"-+\xf4\x05\x10\x8aB\x0c\xca\x87X\x86\xd7O\x9au" +
	"\xe8\x11i\xd3E\xebat\xe5\xe4\x8c\x0b\x1f}\xad\xd5" +
	"\x82\xb6\x878\x10\xfebA\x0f\x84\x98\xd4\x96T\xc1\x91" +
	"E\xf7\x9d\xb8d\xe7a\xcb\xc3W\xf1\xa0\xa1\xe6)\xdb" +
	"\xb1s\xa16\xe1\x92\x85\xfd\x80a/\xdf\xe5\x1b\xbb\xad" +
	"\xe2\x81+|\x10\xcc\x0f7L\xff\xa0\xba\xa6\xf9i'" +
	"aEE\x87\x85\xc1EV\xea\x8a\x98\xd4\x0f\xe7\xef\x1b" +
	"}\xcfOGu\xf5\x0ely\xd1'\xc24\x86,\x89" +
	"\x14\xcd\x02d\xa2{M=\x15\xd5%M\x8er4V" +
	",\x89\xc9D\xb2t\xba}\xe2\x8f\xd2X\x15\x00\xb9\x0d" +
	"\xfb\x10\xf2\x01B\xfc\xd0j\x84\xc8\x10\x0cd4\x07<" +
	"@\x08\xd8\xe1\xc8%\x08\x91\x11\x18\xc8\x03\x1c\x98\x1a}" +
	"<Eu#\x82`\"d!\x0e\xb2\x10\xa4\x15$Q" +
	"\x99!\xab\x89H\xe6B\x12\x13\x12U\x8a%\xb0\xb4N" +
	"\x10\x13~\x89*L\xa3\xcf\xd5\x98\xc74\x060\x90\x81" +
	"}\x08O%l\xf1\x9c\x1c\xa5\x8e\xf93\xad\xa30\xf3" +
	"\x89\xdeR\xfb\xebe\xaa\xb0\x98\x01\xd3\xfa\xa8L\x15\x88" +
	"\xdd\xa0\xf5\xb5TQ\xd4bI\xc4L\xc2dkS\xad" +
	"*T/\xaeJE\x15Y\xaf\xa5\xa01\x89AW\xa2" +
	"\xd8\x81\x10\x89a I\x8f\x07uk\x11\"I\x0cd" +
	")\x07<\xc7\x85\x80C\x88\xaf\xefD\x88,\xc7@\x9e" +
	"\xe1\x80\xc78\x04\x18!~\xd5\x9f\x11\"?\xc6@\xd6" +
	"q`&\x1d\x1d\x9c\x16\x89\xd1\x84!\xcf\x93%\x91y" +
	"\x88\x00\x10\x07\x802\x08\xd0*\x16KJJ\x97\xb1\x9a" +
	"p/3\xbc\xd1\x1eRDi\xc1\xacZ\xd9\xa0Se" +
	"\xdd\xf0\xcb\x89\xb8\x8b\x12\xa5\x05\x09u\x91B\xb9X\x9c" +
	"V,\xa4\x09\xa3\x9aJT^Hc\xa8\xb7\x1a.M" +
	"@\xd7\xfb~\xf1O\xbbN\xfe,\xf1\x92h\xa0p\xf7" +
	"\xf4e\x1c\xe8\xce\xfb(\\\x836\xae\xd6Q\x08\x91\xfb" +
	"0\x901\x9f\xad5l\xa8IY\x82\x00\xe2 `\xd1" +
	"T\xa3qY70\xd5\xdcg6\xd39cG\xe8\x06" +
	"\x89#FU\xcdHS\xaf<\xaaj`\xf4\x90P\x8a" +
	"\x10\xb9\x0d\x03\x09qP\xa6QQW\x13\xae1\x92\xa8" +
	"(\xcc\x06\xb0^\x9d\xa2\xa0~\xb8[}\xbd k\xaa" +
	"Dc)\x0d\x01\xed\xe54G\xb5\xee.\xfb\x0d\xaa\xdd" +
	"\x8c\x97i\x8b\xd7\xc4^/SN,T\x19\x9995" +
	"\xe1h\x8e\xd8'~YM\xdcR\xcd\x94q<\x9d\x18" +
	"Fx;1\x1e}K\xae\xc7\xe1>\xebM_D\xa6" +
	"\x9a\xa6j\xaeNMS\xed\xaa\x11puVD\x11\"" +
	"\x131\x90*\x8f\xcei\xcc\xf1\xa9\x18\xc8l\x0e\xc0)" +
	"\x1a3\xbf\x84\x10\xa9\xc2@\xe6p`\xd6Q]\x17\xe3" +
	"t\x06\xf2\xd7'\xa9\xc7\xf3^\xd1\xf0\xa74\xd9Mz" +
	"\x9a\xd3\x9c\x13\xf8jg\x7f\xabH\xe6\xeas\xdf\x95\xa3" +
	"\xd1\xaf\xdd\x9c\xf6\xd5g\xaa\xe3\xaa\x1a\x8b\xd6\xd3b\xb0" +
	"\xd5V\xaaak\xdf\xffw\xe8\xd4\xbd\xb4\x80\xaaT\xd8" +
	"\xda\xdf\xf4\xe2#'\x0c\xaai\xa9$g\xb8\x8f\xc1>" +
	"\xe8U4\xfa\xdb\xaf \xdd\xaf@%\xbe\xcc\x88\xc1\xc3" +
	"\xa8\xb0\xd5\xbf\xbc\x1d\x8b\xd9:\x07\x03\xa9\xf5\x04\x9d\xb2" +
	"\xa8\xcc\xc5@\x14O\xc7\x92\x19Kk1\x90\xa7<\x1d" +
	"k\x05\xfb\xfbR\x0c\xe4i\x0e\xc2\x1a\x15\x95\xba\xb4[" +
	"eb\xca\xa8\x95c\xae\x97l[G\x8dZ\xe4Wc" +
	":\xe4#\xa8\xc2`]\xe6#\x08k\xcc*\x08\xa6\x0d" +
	"E\x00A\x8f;\\\xcf\xf6[\xc6\xca\"\xed\xd9{\x7f" +
	"\xfdY\xbd\x97\x19\xad` \x8b=\x9e\xa4\xd8s60" +
	"\x90\xe5\x1eO\x96\xbd\x94i\xc8V\x09\xa6Z$\x06\xe9" +
	"\xc6[\xc0\xc8\xe5vDv=C\xae\xa3\xc8\xaf\xa6\x8c" +
	"n\xa7\x13\xc4\x84\x84\xc2T\xf1\xf6\xd8\xa4\xa6\xc65\xaa" +
	"\xeb /\xa4\xcc\xf0\xea2\xaa\xa7\x14Cw\x01\x9a\xb5" +
	"O\x0fZ\xd5T\xf7\xa7\x94\xff5\xf5=ce\x7f\x14" +
	"\xb8\xa3<\x7f{if\xfc\xe4\x8bJ3\xdf\xa9<_" +
	"\x9d\x19\xa2y\xbe\xc6\x89\xb1\xfdC\xcdt\xcfG\xa0\x99" +
	"\xe9F\x8c0\xd5\xbc\x09(\xed7\x95\xaa\x1d*\x19\x9e" +
	"\x04<^\x93\x19\x93\xca\xec\x04@0c\xb9\xcd\x09\xfb" +
	"\x82B0\xe3\x85C\x96d\xc6@\x08f\xdcrnu" +
	"\x8f\xc9\x10\xcc8\xea\\3r\xb2TcI4\xd2\xe3" +
	"F\xb9s\xc6\x8e\xae\xd5\xffu9\x9e\x10\x8d\xeeU\xaf" +
	"\xcf\xc11\x1d:L{\xf6\x0069N\xc6@fx" +
	"\x82G\xd8<8\x1b\x03\x89y\x82'\xce\xcfD\xb4?" +
	"C\xa2h\x18TK<\xc4\x89:\x8d9\xea\x93\x16$" +
	"\x83\xb1\xba\xe2dYG\x05\x86\xaa\xd5\xbb\xc7\xe9\xe1\x1d" +
	"\xcbQ\xcfT\x94\x0e\xe5\x8dOE\x8b\xa8\"\xa9un" +
	"E\x9eE\xc3\xd6\xfeZ\xb1\xa5\xba\xce\xaa\xbaW\x8aT" +
	"\xcb(\x90\x88\xbbs\xe1\x04\xe7\x00zJ\xaa\xf1Hb" +
	"\x19\x9e\xc6\xca\x0fVc\xbd\xd2\xd4G\x81\xb1\xe4\x0dt" +
	"\xe55\xb3\x02\xb3\x0e\x03\xd9\xeaI\xd1fV`~\x81" +
	"\x81l\xf7\xa4h\x1b+0-\x18\xc8n\x0f\xbfw\xb1" +
	"\x02\xb3\x1b\x03\xd9\xcb\x01\xef\xf3\x85\xc0\x87\x10\xdf\xce2" +
	"\xbc\x1f\x039\xc2\x01\x9f\x95\x15\x82,\x84\xf8\xd7\xd8\x07" +
	"\xc3\x11\x0c\xe4\xd4\xff\xbd\x14ucK\xb5\xd3Z{\xb0" +
	"E\xaf\x155v\x09\xe9[\xcfg\xc7\x7f\x03\x00\x00\xff" +
	"\xff%.\x09\xbb"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_a54fcc87aefc9866,
		Nodes: []uint64{
			0x80a11030a37e1415,
			0x8bcb6e604153a8dd,
			0x8f0aac0bdf879ecb,
			0x934c3d62b006f8da,
			0x96955ceebafdffa3,
			0x9bf8c21f751ebf99,
			0xa0e05e5fb8875d8b,
			0xa7a76ed346692835,
			0xa7be87e6ef0aa7cc,
			0xac3d3f012fe6497c,
			0xc8aba2ad7f35b274,
			0xcba85ac7b2406383,
			0xd2e423fd720731b2,
			0xd6edeb45b4137a8a,
			0xda7f1660e0e51156,
			0xdc43324975b1f5f4,
			0xddb4be39c2309db1,
			0xdecf58c214d86357,
			0xdffc4695f4077d99,
			0xe2ea38674be7e974,
			0xe67dc93b96724bdc,
			0xe99a410370f42e83,
			0xed330d91ad002fd4,
			0xee32878ba28c7cc2,
			0xf4a0795fc8af5905,
			0xf4a36356cc57469e,
			0xf5de2c77d40f75ac,
			0xf93c45ad003b0423,
			0xfd32972634c56af3,
		},
		Compressed: true,
	})
}
