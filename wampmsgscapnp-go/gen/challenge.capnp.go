// Code generated by capnpc-go. DO NOT EDIT.

package gen

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
)

type Challenge capnp.Struct

// Challenge_TypeID is the unique identifier for the type Challenge.
const Challenge_TypeID = 0xf93c45ad003b0423

func NewChallenge(s *capnp.Segment) (Challenge, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Challenge(st), err
}

func NewRootChallenge(s *capnp.Segment) (Challenge, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Challenge(st), err
}

func ReadRootChallenge(msg *capnp.Message) (Challenge, error) {
	root, err := msg.Root()
	return Challenge(root.Struct()), err
}

func (s Challenge) String() string {
	str, _ := text.Marshal(0xf93c45ad003b0423, capnp.Struct(s))
	return str
}

func (s Challenge) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Challenge) DecodeFromPtr(p capnp.Ptr) Challenge {
	return Challenge(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Challenge) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Challenge) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Challenge) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Challenge) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Challenge) AuthMethod() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Challenge) HasAuthMethod() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Challenge) AuthMethodBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Challenge) SetAuthMethod(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Challenge_List is a list of Challenge.
type Challenge_List = capnp.StructList[Challenge]

// NewChallenge creates a new list of Challenge.
func NewChallenge_List(s *capnp.Segment, sz int32) (Challenge_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Challenge](l), err
}

// Challenge_Future is a wrapper for a Challenge promised by a client call.
type Challenge_Future struct{ *capnp.Future }

func (f Challenge_Future) Struct() (Challenge, error) {
	p, err := f.Future.Ptr()
	return Challenge(p.Struct()), err
}
