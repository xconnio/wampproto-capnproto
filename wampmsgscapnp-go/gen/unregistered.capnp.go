// Code generated by capnpc-go. DO NOT EDIT.

package gen

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
)

type Unregistered capnp.Struct

// Unregistered_TypeID is the unique identifier for the type Unregistered.
const Unregistered_TypeID = 0xa7a76ed346692835

func NewUnregistered(s *capnp.Segment) (Unregistered, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Unregistered(st), err
}

func NewRootUnregistered(s *capnp.Segment) (Unregistered, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Unregistered(st), err
}

func ReadRootUnregistered(msg *capnp.Message) (Unregistered, error) {
	root, err := msg.Root()
	return Unregistered(root.Struct()), err
}

func (s Unregistered) String() string {
	str, _ := text.Marshal(0xa7a76ed346692835, capnp.Struct(s))
	return str
}

func (s Unregistered) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Unregistered) DecodeFromPtr(p capnp.Ptr) Unregistered {
	return Unregistered(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Unregistered) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Unregistered) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Unregistered) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Unregistered) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Unregistered) RequestID() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s Unregistered) SetRequestID(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// Unregistered_List is a list of Unregistered.
type Unregistered_List = capnp.StructList[Unregistered]

// NewUnregistered creates a new list of Unregistered.
func NewUnregistered_List(s *capnp.Segment, sz int32) (Unregistered_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Unregistered](l), err
}

// Unregistered_Future is a wrapper for a Unregistered promised by a client call.
type Unregistered_Future struct{ *capnp.Future }

func (f Unregistered_Future) Struct() (Unregistered, error) {
	p, err := f.Future.Ptr()
	return Unregistered(p.Struct()), err
}
