// Code generated by capnpc-go. DO NOT EDIT.

package gen

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
)

type Invocation capnp.Struct

// Invocation_TypeID is the unique identifier for the type Invocation.
const Invocation_TypeID = 0xcba85ac7b2406383

func NewInvocation(s *capnp.Segment) (Invocation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Invocation(st), err
}

func NewRootInvocation(s *capnp.Segment) (Invocation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Invocation(st), err
}

func ReadRootInvocation(msg *capnp.Message) (Invocation, error) {
	root, err := msg.Root()
	return Invocation(root.Struct()), err
}

func (s Invocation) String() string {
	str, _ := text.Marshal(0xcba85ac7b2406383, capnp.Struct(s))
	return str
}

func (s Invocation) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Invocation) DecodeFromPtr(p capnp.Ptr) Invocation {
	return Invocation(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Invocation) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Invocation) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Invocation) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Invocation) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Invocation) RequestID() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s Invocation) SetRequestID(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s Invocation) RegistrationID() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Invocation) SetRegistrationID(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

// Invocation_List is a list of Invocation.
type Invocation_List = capnp.StructList[Invocation]

// NewInvocation creates a new list of Invocation.
func NewInvocation_List(s *capnp.Segment, sz int32) (Invocation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Invocation](l), err
}

// Invocation_Future is a wrapper for a Invocation promised by a client call.
type Invocation_Future struct{ *capnp.Future }

func (f Invocation_Future) Struct() (Invocation, error) {
	p, err := f.Future.Ptr()
	return Invocation(p.Struct()), err
}
