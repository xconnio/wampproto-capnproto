// Code generated by capnpc-go. DO NOT EDIT.

package gen

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
)

type Registered capnp.Struct

// Registered_TypeID is the unique identifier for the type Registered.
const Registered_TypeID = 0xdc43324975b1f5f4

func NewRegistered(s *capnp.Segment) (Registered, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Registered(st), err
}

func NewRootRegistered(s *capnp.Segment) (Registered, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Registered(st), err
}

func ReadRootRegistered(msg *capnp.Message) (Registered, error) {
	root, err := msg.Root()
	return Registered(root.Struct()), err
}

func (s Registered) String() string {
	str, _ := text.Marshal(0xdc43324975b1f5f4, capnp.Struct(s))
	return str
}

func (s Registered) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Registered) DecodeFromPtr(p capnp.Ptr) Registered {
	return Registered(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Registered) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Registered) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Registered) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Registered) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Registered) RequestID() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s Registered) SetRequestID(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s Registered) RegistrationID() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Registered) SetRegistrationID(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

// Registered_List is a list of Registered.
type Registered_List = capnp.StructList[Registered]

// NewRegistered creates a new list of Registered.
func NewRegistered_List(s *capnp.Segment, sz int32) (Registered_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Registered](l), err
}

// Registered_Future is a wrapper for a Registered promised by a client call.
type Registered_Future struct{ *capnp.Future }

func (f Registered_Future) Struct() (Registered, error) {
	p, err := f.Future.Ptr()
	return Registered(p.Struct()), err
}
