"""This is an automatically generated stub for `welcome.capnp`."""
from __future__ import annotations

from contextlib import contextmanager
from io import BufferedWriter
from typing import Iterator, Literal, overload

class Welcome:
    class Roles:
        class Dealer:
            callerIdentification: bool
            callTimeout: bool
            callCanceling: bool
            progressiveCallResults: bool
            patternBasedRegistration: bool
            sharedRegistration: bool
            @staticmethod
            @contextmanager
            def from_bytes(
                data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
            ) -> Iterator[Welcome.Roles.DealerReader]: ...
            @staticmethod
            def from_bytes_packed(
                data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
            ) -> Welcome.Roles.DealerReader: ...
            @staticmethod
            def new_message() -> Welcome.Roles.DealerBuilder: ...
            def to_dict(self) -> dict: ...

        class DealerReader(Welcome.Roles.Dealer):
            def as_builder(self) -> Welcome.Roles.DealerBuilder: ...

        class DealerBuilder(Welcome.Roles.Dealer):
            @staticmethod
            def from_dict(dictionary: dict) -> Welcome.Roles.DealerBuilder: ...
            def copy(self) -> Welcome.Roles.DealerBuilder: ...
            def to_bytes(self) -> bytes: ...
            def to_bytes_packed(self) -> bytes: ...
            def to_segments(self) -> list[bytes]: ...
            def as_reader(self) -> Welcome.Roles.DealerReader: ...
            @staticmethod
            def write(file: BufferedWriter) -> None: ...
            @staticmethod
            def write_packed(file: BufferedWriter) -> None: ...

        class Broker:
            publisherIdentification: bool
            publisherExclusion: bool
            acknowledgeEventReceived: bool
            patternBasedSubscription: bool
            @staticmethod
            @contextmanager
            def from_bytes(
                data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
            ) -> Iterator[Welcome.Roles.BrokerReader]: ...
            @staticmethod
            def from_bytes_packed(
                data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
            ) -> Welcome.Roles.BrokerReader: ...
            @staticmethod
            def new_message() -> Welcome.Roles.BrokerBuilder: ...
            def to_dict(self) -> dict: ...

        class BrokerReader(Welcome.Roles.Broker):
            def as_builder(self) -> Welcome.Roles.BrokerBuilder: ...

        class BrokerBuilder(Welcome.Roles.Broker):
            @staticmethod
            def from_dict(dictionary: dict) -> Welcome.Roles.BrokerBuilder: ...
            def copy(self) -> Welcome.Roles.BrokerBuilder: ...
            def to_bytes(self) -> bytes: ...
            def to_bytes_packed(self) -> bytes: ...
            def to_segments(self) -> list[bytes]: ...
            def as_reader(self) -> Welcome.Roles.BrokerReader: ...
            @staticmethod
            def write(file: BufferedWriter) -> None: ...
            @staticmethod
            def write_packed(file: BufferedWriter) -> None: ...
        dealer: Welcome.Roles.Dealer | Welcome.Roles.DealerBuilder | Welcome.Roles.DealerReader
        broker: Welcome.Roles.Broker | Welcome.Roles.BrokerBuilder | Welcome.Roles.BrokerReader
        @overload
        def init(self, name: Literal["dealer"]) -> Welcome.Roles.Dealer: ...
        @overload
        def init(self, name: Literal["broker"]) -> Welcome.Roles.Broker: ...
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[Welcome.RolesReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Welcome.RolesReader: ...
        @staticmethod
        def new_message() -> Welcome.RolesBuilder: ...
        def to_dict(self) -> dict: ...

    class RolesReader(Welcome.Roles):
        dealer: Welcome.Roles.DealerReader
        broker: Welcome.Roles.BrokerReader
        def as_builder(self) -> Welcome.RolesBuilder: ...

    class RolesBuilder(Welcome.Roles):
        dealer: Welcome.Roles.Dealer | Welcome.Roles.DealerBuilder | Welcome.Roles.DealerReader
        broker: Welcome.Roles.Broker | Welcome.Roles.BrokerBuilder | Welcome.Roles.BrokerReader
        @staticmethod
        def from_dict(dictionary: dict) -> Welcome.RolesBuilder: ...
        def copy(self) -> Welcome.RolesBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> Welcome.RolesReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    sessionID: int
    authid: str
    authrole: str
    authmethod: str
    authprovider: str
    roles: Welcome.Roles | Welcome.RolesBuilder | Welcome.RolesReader
    def init(self, name: Literal["roles"]) -> Welcome.Roles: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[WelcomeReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> WelcomeReader: ...
    @staticmethod
    def new_message() -> WelcomeBuilder: ...
    def to_dict(self) -> dict: ...

class WelcomeReader(Welcome):
    roles: Welcome.RolesReader
    def as_builder(self) -> WelcomeBuilder: ...

class WelcomeBuilder(Welcome):
    roles: Welcome.Roles | Welcome.RolesBuilder | Welcome.RolesReader
    @staticmethod
    def from_dict(dictionary: dict) -> WelcomeBuilder: ...
    def copy(self) -> WelcomeBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> WelcomeReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...
