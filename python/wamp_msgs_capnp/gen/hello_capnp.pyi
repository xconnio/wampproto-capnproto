"""This is an automatically generated stub for `hello.capnp`."""
from __future__ import annotations

from contextlib import contextmanager
from io import BufferedWriter
from typing import Iterator, Literal, Sequence, overload

class Hello:
    class Roles:
        class Caller:
            callerIdentification: bool
            callTimeout: bool
            callCanceling: bool
            progressiveCallResults: bool
            @staticmethod
            @contextmanager
            def from_bytes(
                data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
            ) -> Iterator[Hello.Roles.CallerReader]: ...
            @staticmethod
            def from_bytes_packed(
                data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
            ) -> Hello.Roles.CallerReader: ...
            @staticmethod
            def new_message() -> Hello.Roles.CallerBuilder: ...
            def to_dict(self) -> dict: ...

        class CallerReader(Hello.Roles.Caller):
            def as_builder(self) -> Hello.Roles.CallerBuilder: ...

        class CallerBuilder(Hello.Roles.Caller):
            @staticmethod
            def from_dict(dictionary: dict) -> Hello.Roles.CallerBuilder: ...
            def copy(self) -> Hello.Roles.CallerBuilder: ...
            def to_bytes(self) -> bytes: ...
            def to_bytes_packed(self) -> bytes: ...
            def to_segments(self) -> list[bytes]: ...
            def as_reader(self) -> Hello.Roles.CallerReader: ...
            @staticmethod
            def write(file: BufferedWriter) -> None: ...
            @staticmethod
            def write_packed(file: BufferedWriter) -> None: ...

        class Callee:
            callerIdentification: bool
            callTimeout: bool
            callCanceling: bool
            progressiveCallResults: bool
            patternBasedRegistration: bool
            sharedRegistration: bool
            @staticmethod
            @contextmanager
            def from_bytes(
                data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
            ) -> Iterator[Hello.Roles.CalleeReader]: ...
            @staticmethod
            def from_bytes_packed(
                data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
            ) -> Hello.Roles.CalleeReader: ...
            @staticmethod
            def new_message() -> Hello.Roles.CalleeBuilder: ...
            def to_dict(self) -> dict: ...

        class CalleeReader(Hello.Roles.Callee):
            def as_builder(self) -> Hello.Roles.CalleeBuilder: ...

        class CalleeBuilder(Hello.Roles.Callee):
            @staticmethod
            def from_dict(dictionary: dict) -> Hello.Roles.CalleeBuilder: ...
            def copy(self) -> Hello.Roles.CalleeBuilder: ...
            def to_bytes(self) -> bytes: ...
            def to_bytes_packed(self) -> bytes: ...
            def to_segments(self) -> list[bytes]: ...
            def as_reader(self) -> Hello.Roles.CalleeReader: ...
            @staticmethod
            def write(file: BufferedWriter) -> None: ...
            @staticmethod
            def write_packed(file: BufferedWriter) -> None: ...

        class Publisher:
            publisherIdentification: bool
            publisherExclusion: bool
            acknowledgeEventReceived: bool
            @staticmethod
            @contextmanager
            def from_bytes(
                data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
            ) -> Iterator[Hello.Roles.PublisherReader]: ...
            @staticmethod
            def from_bytes_packed(
                data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
            ) -> Hello.Roles.PublisherReader: ...
            @staticmethod
            def new_message() -> Hello.Roles.PublisherBuilder: ...
            def to_dict(self) -> dict: ...

        class PublisherReader(Hello.Roles.Publisher):
            def as_builder(self) -> Hello.Roles.PublisherBuilder: ...

        class PublisherBuilder(Hello.Roles.Publisher):
            @staticmethod
            def from_dict(dictionary: dict) -> Hello.Roles.PublisherBuilder: ...
            def copy(self) -> Hello.Roles.PublisherBuilder: ...
            def to_bytes(self) -> bytes: ...
            def to_bytes_packed(self) -> bytes: ...
            def to_segments(self) -> list[bytes]: ...
            def as_reader(self) -> Hello.Roles.PublisherReader: ...
            @staticmethod
            def write(file: BufferedWriter) -> None: ...
            @staticmethod
            def write_packed(file: BufferedWriter) -> None: ...

        class Subscriber:
            publisherIdentification: bool
            patternBasedSubscription: bool
            @staticmethod
            @contextmanager
            def from_bytes(
                data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
            ) -> Iterator[Hello.Roles.SubscriberReader]: ...
            @staticmethod
            def from_bytes_packed(
                data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
            ) -> Hello.Roles.SubscriberReader: ...
            @staticmethod
            def new_message() -> Hello.Roles.SubscriberBuilder: ...
            def to_dict(self) -> dict: ...

        class SubscriberReader(Hello.Roles.Subscriber):
            def as_builder(self) -> Hello.Roles.SubscriberBuilder: ...

        class SubscriberBuilder(Hello.Roles.Subscriber):
            @staticmethod
            def from_dict(dictionary: dict) -> Hello.Roles.SubscriberBuilder: ...
            def copy(self) -> Hello.Roles.SubscriberBuilder: ...
            def to_bytes(self) -> bytes: ...
            def to_bytes_packed(self) -> bytes: ...
            def to_segments(self) -> list[bytes]: ...
            def as_reader(self) -> Hello.Roles.SubscriberReader: ...
            @staticmethod
            def write(file: BufferedWriter) -> None: ...
            @staticmethod
            def write_packed(file: BufferedWriter) -> None: ...
        caller: Hello.Roles.Caller | Hello.Roles.CallerBuilder | Hello.Roles.CallerReader
        callee: Hello.Roles.Callee | Hello.Roles.CalleeBuilder | Hello.Roles.CalleeReader
        publisher: Hello.Roles.Publisher | Hello.Roles.PublisherBuilder | Hello.Roles.PublisherReader
        subscriber: Hello.Roles.Subscriber | Hello.Roles.SubscriberBuilder | Hello.Roles.SubscriberReader
        @overload
        def init(self, name: Literal["caller"]) -> Hello.Roles.Caller: ...
        @overload
        def init(self, name: Literal["callee"]) -> Hello.Roles.Callee: ...
        @overload
        def init(self, name: Literal["publisher"]) -> Hello.Roles.Publisher: ...
        @overload
        def init(self, name: Literal["subscriber"]) -> Hello.Roles.Subscriber: ...
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[Hello.RolesReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Hello.RolesReader: ...
        @staticmethod
        def new_message() -> Hello.RolesBuilder: ...
        def to_dict(self) -> dict: ...

    class RolesReader(Hello.Roles):
        caller: Hello.Roles.CallerReader
        callee: Hello.Roles.CalleeReader
        publisher: Hello.Roles.PublisherReader
        subscriber: Hello.Roles.SubscriberReader
        def as_builder(self) -> Hello.RolesBuilder: ...

    class RolesBuilder(Hello.Roles):
        caller: Hello.Roles.Caller | Hello.Roles.CallerBuilder | Hello.Roles.CallerReader
        callee: Hello.Roles.Callee | Hello.Roles.CalleeBuilder | Hello.Roles.CalleeReader
        publisher: Hello.Roles.Publisher | Hello.Roles.PublisherBuilder | Hello.Roles.PublisherReader
        subscriber: Hello.Roles.Subscriber | Hello.Roles.SubscriberBuilder | Hello.Roles.SubscriberReader
        @staticmethod
        def from_dict(dictionary: dict) -> Hello.RolesBuilder: ...
        def copy(self) -> Hello.RolesBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> Hello.RolesReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    realm: str
    authid: str
    authmethods: Sequence[str]
    roles: Hello.Roles | Hello.RolesBuilder | Hello.RolesReader
    def init(self, name: Literal["roles"]) -> Hello.Roles: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[HelloReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> HelloReader: ...
    @staticmethod
    def new_message() -> HelloBuilder: ...
    def to_dict(self) -> dict: ...

class HelloReader(Hello):
    roles: Hello.RolesReader
    def as_builder(self) -> HelloBuilder: ...

class HelloBuilder(Hello):
    roles: Hello.Roles | Hello.RolesBuilder | Hello.RolesReader
    @staticmethod
    def from_dict(dictionary: dict) -> HelloBuilder: ...
    def copy(self) -> HelloBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> HelloReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...
